{"version":3,"file":"ajaxer.js","sources":["../lib/utils.js","../lib/constructURL.js","../lib/parseHeaders.js","../lib/transformData.js","../lib/Ajaxer.js","../browser.js"],"sourcesContent":["const {\n  hasOwnProperty,\n  toString\n} = {};\nconst whiteSpace = /^\\s*|\\s*$/g;\nconst primitive = /^(number|string|boolean|symbol|undefined)$/;\n\nexport function toStringTag(value) {\n  return toString\n    .call(value)\n    .slice(8, -1);\n}\n\nexport const isArray = Array.isArray || ((value) => (\n  toStringTag(value) === 'Array'\n));\n\nexport function isFunction(value) {\n  return typeof value === 'function' || toStringTag(value) === 'Function';\n}\n\nexport function isObject(value) {\n  return typeof value && (typeof value === 'object' || isFunction(value));\n}\n\nexport function isPrimitive(value) {\n  return value === null || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\nexport function assign(target, ...objects) {\n  iterate(objects, (source) => {\n    iterate(source, (value, key) => {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function iterate(object, callback) {\n  const array = isArray(object);\n\n  let iterated = 0;\n  const { length } = object || {};\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= length) {\n        break;\n      }\n\n      callback(object[key], array ? +key : key, object);\n    }\n  }\n}\n\nexport function map(object, callback) {\n  const newObject = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n\nexport function trim(string) {\n  return string.replace(whiteSpace, '');\n}\n\nexport function replaceString(string, stringToReplace, replacement) {\n  return string\n    .split(stringToReplace)\n    .join(replacement);\n}\n\nexport function deepClone(object) {\n  if (isPrimitive(object) || isFunction(object)) {\n    return object;\n  }\n\n  const clone = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    clone[key] = deepClone(value);\n  });\n\n  return clone;\n}\n\nexport function deepAssign(target, ...objects) {\n  iterate(objects, (object) => {\n    iterate(object, (object, key) => {\n      if (isPrimitive(object) || !hasOwnProperty.call(target, key)) {\n        target[key] = deepClone(object);\n\n        return;\n      }\n\n      if (!isPrimitive(target[key])) {\n        deepAssign(target[key], object);\n      }\n    });\n  });\n\n  return target;\n}\n\nexport function hasOwn(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n","import {\n  isArray,\n  isObject,\n  iterate,\n  map,\n  replaceString\n} from './utils';\n\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst emptyArray = [];\n\nexport default (baseURL, url, params, query) => {\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = replaceString(URL, `:${ param }`, encode(value));\n  });\n\n  const queryParams = querySwitcher(query, '');\n\n  if (queryParams.length) {\n    const prefix = URL.indexOf('?') === -1 ? '?' : '&';\n    const postfix = map(queryParams, ({ param, value }) => (\n      `${ encode(param) }=${ encode(value) }`\n    )).join('&');\n\n    URL += prefix + postfix;\n  }\n\n  return URL;\n};\n\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\nfunction encode(string) {\n  return encodeURIComponent(string);\n}\n\nfunction querySwitcher(query, prefix) {\n  /* eslint indent: 0 */\n  switch (true) {\n    case isArray(query): {\n      const queryParams = [];\n\n      iterate(query, (value) => {\n        if (isObject(value)) {\n          return queryParams.push(...querySwitcher(value, `${ prefix }[]`));\n        }\n\n        queryParams.push({\n          param: `${ prefix }[]`,\n          value\n        });\n      });\n\n      return queryParams;\n    }\n\n    case isObject(query): {\n      const queryParams = [];\n\n      iterate(query, (value, param) => {\n        if (isObject(value)) {\n          queryParams.push(...querySwitcher(value, prefix ? `${ prefix }[${ param }]` : param));\n\n          return;\n        }\n\n        queryParams.push({\n          param: prefix ? `${ prefix }[${ param }]` : param,\n          value: String(value)\n        });\n      });\n\n      return queryParams;\n    }\n\n    default: {\n      return emptyArray;\n    }\n  }\n}\n","import {\n  iterate,\n  trim\n} from './utils';\n\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = trim(value.substring(0, index));\n    const val = trim(value.substring(index + 1));\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","import {\n  isObject,\n  toStringTag\n} from './utils';\n\nconst notToTransform = ['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number'];\nconst withoutBody = ['DELETE', 'GET', 'HEAD'];\n\nexport default (data, method, headers) => {\n  if (withoutBody.indexOf(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOf(toStringTag(data)) === -1) {\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json;charset=utf-8';\n    }\n\n    return JSON.stringify(data);\n  }\n\n  return data;\n};\n","import {\n  isFunction,\n  isString,\n  assign,\n  iterate,\n  deepAssign,\n  deepClone,\n  hasOwn\n} from './utils';\n\nimport constructURL from './constructURL';\nimport parseHeaders from './parseHeaders';\nimport transformData from './transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} AjaxerMethod\n * @public\n */\n\n/**\n * @typedef {Object} AjaxerConfig\n * @public\n * @property {Array.<AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String>} [headers]\n * @property {AjaxerMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} AjaxerResponse\n * @public\n * @property {AjaxerConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback AjaxerAfterMiddleware\n * @public\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerBeforeMiddleware\n * @public\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerConfigFunction\n * @public\n * @param {AjaxerConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: window.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = ['POST', 'PUT'];\nlet Promise;\n\n/**\n * @class Ajaxer\n * @extends Function\n * @public\n * @param {AjaxerConfig} [config = {}] - Config to add.\n * @returns {Ajaxer} Instance of Ajaxer.\n * An instance of Ajaxer is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const ajaxer = new Ajaxer();\n *\n * ajaxer('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Ajaxer extends Function {\n  /**\n   * @method Ajaxer.usePromise\n   * @public\n   * @param {Promise} PromiseClass - Promise class to use.\n   */\n  static usePromise(PromiseClass) {\n    Promise = PromiseClass;\n  }\n\n  constructor(config = {}) {\n    super();\n\n    function ajaxer() {\n      return ajaxer.request.apply(ajaxer, arguments);\n    }\n\n    const conf = deepAssign({}, defaults, config);\n\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\n      conf.before.push(fetchBeforeMiddleware);\n    }\n\n    /**\n     * @member {AjaxerConfig} Ajaxer#$$\n     * @type {AjaxerConfig}\n     * @public\n     * @description Ajaxer config.\n     */\n    Object.defineProperty(ajaxer, '$$', { value: conf });\n    Object.setPrototypeOf(ajaxer, Ajaxer.prototype);\n\n    return ajaxer;\n  }\n\n  /**\n   * @method Ajaxer#after\n   * @public\n   * @param {AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = JSON.parse(res.data):\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#before\n   * @public\n   * @param {AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#config\n   * @public\n   * @param {String|AjaxerConfig|AjaxerConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Ajaxer|AjaxerConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const ajaxer = new Ajaxer();\n   *\n   * ajaxer.config({ baseURL: 5000 });\n   * ajaxer.config().timeout; // 5000\n   *\n   * ajaxer.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const config = this.$$;\n\n    if (!arguments.length) {\n      return config;\n    }\n\n    if (isFunction(property)) {\n      property(config);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      deepAssign(config, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#delete\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * ajaxer.delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Ajaxer#get\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * ajaxer.get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Ajaxer#head\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Ajaxer#headers\n   * @public\n   * @param {String|Object.<String, String>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String} [value] - Header value. If the first argument is a string\n   * this has to be a header value.\n   * @returns {Ajaxer} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * ajaxer\n   *   .headers('My-Header', 'Value')\n   *   .headers({\n   *     'My-Another-Header': 'Value2'\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      headers[header] = value;\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#instance\n   * @public\n   * @param {AjaxerConfig} [config] - New config if needed.\n   * @returns {Ajaxer} New instance of Ajaxer.\n   * @description Method for creating new ajaxer instances based on already existent.\n   *\n   * @example\n   * const mainAjaxer = new Ajaxer({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longAjaxer = mainAjaxer.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign({}, this.$$, config),\n      dataConfig\n    );\n\n    return new Ajaxer(conf);\n  }\n\n  /**\n   * @method Ajaxer#patch\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#post\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#put\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {AjaxerConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<AjaxerResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * ajaxer.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign(\n        deepClone(this.$$),\n        urlConfig,\n        config\n      ),\n      dataConfig\n    );\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        data,\n        headers,\n        method,\n        onprogress,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOf(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = +timeout || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(data);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\nfunction fetchBeforeMiddleware(config) {\n  const {\n    baseURL,\n    data,\n    headers,\n    method,\n    params,\n    query,\n    url\n  } = config;\n  const METHOD = method.toUpperCase();\n\n  config.method = METHOD;\n  config.url = constructURL(baseURL, url, params, query);\n  config.data = transformData(data, METHOD, headers);\n}\n\n/**\n * @const {Ajaxer} fetch\n * @type {Ajaxer}\n * @public\n * @description Empty instance of Ajaxer.\n */\nconst fetch = new Ajaxer();\n\nexport default Ajaxer;\nexport { Ajaxer, fetch };\n","import Ajaxer from './lib/Ajaxer';\n\nwindow.Ajaxer = Ajaxer;\n"],"names":["hasOwnProperty","toString","whiteSpace","toStringTag","value","call","slice","isArray","Array","isFunction","isObject","isPrimitive","test","isString","assign","target","objects","source","key","iterate","object","callback","array","iterated","length","map","newObject","trim","string","replace","replaceString","stringToReplace","replacement","split","join","deepClone","clone","deepAssign","hasOwn","property","absoluteURLRegexp","emptyArray","baseURL","url","params","query","URL","isAbsolute","String","param","encode","queryParams","querySwitcher","prefix","indexOf","postfix","encodeURIComponent","push","rawHeaders","headers","index","substring","val","notToTransform","withoutBody","data","method","JSON","stringify","defaults","window","location","origin","uploadMethods","Promise","Ajaxer","PromiseClass","config","ajaxer","request","apply","arguments","conf","before","fetchBeforeMiddleware","defineProperty","setPrototypeOf","prototype","middleware","afterAll","after","$$","unshift","beforeAll","undefined","header","dataConfig","urlConfig","xhr","promise","resolve","then","err","reject","auth","username","password","onprogress","responseType","timeout","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","error","Error","type","onerror","ontimeout","onreadystatechange","status","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","e","send","abort","Function","METHOD","toUpperCase","constructURL","transformData","fetch"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}