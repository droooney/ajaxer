{"version":3,"file":"ajaxer.js","sources":["../lib/global.js","../lib/utils.js","../lib/Promise.js","../lib/constructURL.js","../lib/parseHeaders.js","../lib/transformData.js","../lib/Ajaxer.js","../browser.js"],"sourcesContent":["/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","const {\n  hasOwnProperty,\n  toString\n} = {};\nconst whiteSpace = /^\\s*|\\s*$/g;\nconst primitive = /^(number|string|boolean|symbol|undefined)$/;\n\nexport function toStringTag(value) {\n  return toString\n    .call(value)\n    .slice(8, -1);\n}\n\nexport const isArray = Array.isArray || ((value) => (\n  toStringTag(value) === 'Array'\n));\n\nexport function isFunction(value) {\n  return typeof value === 'function' || toStringTag(value) === 'Function';\n}\n\nexport function isObject(value) {\n  return typeof value && (typeof value === 'object' || isFunction(value));\n}\n\nexport function isPrimitive(value) {\n  return value === null || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\nexport function assign(target, ...objects) {\n  iterate(objects, (source) => {\n    iterate(source, (value, key) => {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function iterate(object, callback) {\n  const array = isArray(object);\n\n  let iterated = 0;\n  const { length } = object || {};\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= length) {\n        break;\n      }\n\n      callback(object[key], array ? +key : key, object);\n    }\n  }\n}\n\nexport function map(object, callback) {\n  const newObject = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n\nexport function trim(string) {\n  return string.replace(whiteSpace, '');\n}\n\nexport function replaceString(string, stringToReplace, replacement) {\n  return string\n    .split(stringToReplace)\n    .join(replacement);\n}\n\nexport function deepClone(object) {\n  if (isPrimitive(object) || isFunction(object)) {\n    return object;\n  }\n\n  const clone = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    clone[key] = deepClone(value);\n  });\n\n  return clone;\n}\n\nexport function deepAssign(target, ...objects) {\n  iterate(objects, (object) => {\n    iterate(object, (object, key) => {\n      if (isPrimitive(object) || !hasOwnProperty.call(target, key)) {\n        target[key] = deepClone(object);\n\n        return;\n      }\n\n      if (!isPrimitive(target[key])) {\n        deepAssign(target[key], object);\n      }\n    });\n  });\n\n  return target;\n}\n\nexport function hasOwn(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n","import { isFunction } from './utils';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n * @param {*} value - Promise value.\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = global.Symbol\n  ? Symbol.iterator\n  : Math.random().toString(36);\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    Object.defineProperties(this.$$ = {}, {\n      handled: {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle: {\n        value(status, f, resolve, reject, key) {\n          if (key === secret) {\n            let proxy = null;\n\n            if (isFunction(f)) {\n              proxy = (value) => {\n                try {\n                  resolve(f(value));\n                } catch (err) {\n                  reject(err);\n                }\n              };\n            }\n\n            if (status === 'resolve') {\n              onFulfill.push(proxy || ((value) => resolve(value)));\n            } else if (status === 'reject') {\n              onReject.push(proxy || ((err) => reject(err)));\n            }\n          }\n        }\n      },\n      status: {\n        get() {\n          return hiddenPromise.status;\n        }\n      },\n      value: {\n        get() {\n          return hiddenPromise.value;\n        }\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} value - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(value, true)\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(err, false)\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\nPromise.onError = null;\nPromise.onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\nexport default Promise;\n","import {\n  isArray,\n  isObject,\n  iterate,\n  map,\n  replaceString\n} from './utils';\n\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst emptyArray = [];\n\nexport default (baseURL, url, params, query) => {\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = replaceString(URL, `:${ param }`, encode(value));\n  });\n\n  const queryParams = querySwitcher(query, '');\n\n  if (queryParams.length) {\n    const prefix = URL.indexOf('?') === -1 ? '?' : '&';\n    const postfix = map(queryParams, ({ param, value }) => (\n      `${ encode(param) }=${ encode(value) }`\n    )).join('&');\n\n    URL += prefix + postfix;\n  }\n\n  return URL;\n};\n\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\nfunction encode(string) {\n  return encodeURIComponent(string);\n}\n\nfunction querySwitcher(query, prefix) {\n  /* eslint indent: 0 */\n  switch (true) {\n    case isArray(query): {\n      const queryParams = [];\n\n      iterate(query, (value) => {\n        if (isObject(value)) {\n          return queryParams.push(...querySwitcher(value, `${ prefix }[]`));\n        }\n\n        queryParams.push({\n          param: `${ prefix }[]`,\n          value\n        });\n      });\n\n      return queryParams;\n    }\n\n    case isObject(query): {\n      const queryParams = [];\n\n      iterate(query, (value, param) => {\n        if (isObject(value)) {\n          queryParams.push(...querySwitcher(value, prefix ? `${ prefix }[${ param }]` : param));\n\n          return;\n        }\n\n        queryParams.push({\n          param: prefix ? `${ prefix }[${ param }]` : param,\n          value: String(value)\n        });\n      });\n\n      return queryParams;\n    }\n\n    default: {\n      return emptyArray;\n    }\n  }\n}\n","import {\n  iterate,\n  trim\n} from './utils';\n\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = trim(value.substring(0, index));\n    const val = trim(value.substring(index + 1));\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","import {\n  isObject,\n  toStringTag\n} from './utils';\n\nconst notToTransform = ['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number'];\nconst withoutBody = ['DELETE', 'GET', 'HEAD'];\n\nexport default (data, method, headers) => {\n  if (withoutBody.indexOf(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOf(toStringTag(data)) === -1) {\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json;charset=utf-8';\n    }\n\n    return JSON.stringify(data);\n  }\n\n  return data;\n};\n","import {\n  isFunction,\n  isString,\n  assign,\n  iterate,\n  deepAssign,\n  deepClone,\n  hasOwn\n} from './utils';\n\nimport Promise from './Promise';\n\nimport constructURL from './constructURL';\nimport parseHeaders from './parseHeaders';\nimport transformData from './transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} AjaxerMethod\n * @public\n */\n\n/**\n * @typedef {Object} AjaxerConfig\n * @public\n * @property {Array.<AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String>} [headers]\n * @property {AjaxerMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} AjaxerResponse\n * @public\n * @property {AjaxerConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback AjaxerAfterMiddleware\n * @public\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerBeforeMiddleware\n * @public\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerConfigFunction\n * @public\n * @param {AjaxerConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: global.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = ['POST', 'PUT'];\n\n/**\n * @class Ajaxer\n * @extends Function\n * @public\n * @param {AjaxerConfig} [config = {}] - Config to add.\n * @returns {Ajaxer} Instance of Ajaxer.\n * An instance of Ajaxer is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const ajaxer = new Ajaxer();\n *\n * ajaxer('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Ajaxer extends Function {\n  constructor(config = {}) {\n    super();\n\n    function ajaxer() {\n      return ajaxer.request.apply(ajaxer, arguments);\n    }\n\n    const conf = deepAssign({}, defaults, config);\n\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\n      conf.before.push(fetchBeforeMiddleware);\n    }\n\n    /**\n     * @member {AjaxerConfig} Ajaxer#$$\n     * @type {AjaxerConfig}\n     * @public\n     * @description Ajaxer config.\n     */\n    Object.defineProperty(ajaxer, '$$', { value: conf });\n    Object.setPrototypeOf(ajaxer, Ajaxer.prototype);\n\n    return ajaxer;\n  }\n\n  /**\n   * @method Ajaxer#after\n   * @public\n   * @param {AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = JSON.parse(res.data):\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#before\n   * @public\n   * @param {AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#config\n   * @public\n   * @param {String|AjaxerConfig|AjaxerConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Ajaxer|AjaxerConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const ajaxer = new Ajaxer();\n   *\n   * ajaxer.config({ baseURL: 5000 });\n   * ajaxer.config().timeout; // 5000\n   *\n   * ajaxer.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const config = this.$$;\n\n    if (!arguments.length) {\n      return config;\n    }\n\n    if (isFunction(property)) {\n      property(config);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      deepAssign(config, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#delete\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * ajaxer.delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Ajaxer#get\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * ajaxer.get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Ajaxer#head\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Ajaxer#headers\n   * @public\n   * @param {String|Object.<String, String>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String} [value] - Header value. If the first argument is a string\n   * this has to be a header value.\n   * @returns {Ajaxer} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * ajaxer\n   *   .headers('My-Header', 'Value')\n   *   .headers({\n   *     'My-Another-Header': 'Value2'\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      headers[header] = value;\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#instance\n   * @public\n   * @param {AjaxerConfig} [config] - New config if needed.\n   * @returns {Ajaxer} New instance of Ajaxer.\n   * @description Method for creating new ajaxer instances based on already existent.\n   *\n   * @example\n   * const mainAjaxer = new Ajaxer({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longAjaxer = mainAjaxer.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign({}, this.$$, config),\n      dataConfig\n    );\n\n    return new Ajaxer(conf);\n  }\n\n  /**\n   * @method Ajaxer#patch\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#post\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#put\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {AjaxerConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<AjaxerResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * ajaxer.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign(\n        deepClone(this.$$),\n        urlConfig,\n        config\n      ),\n      dataConfig\n    );\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        data,\n        headers,\n        method,\n        onprogress,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOf(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = +timeout || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(data);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\nfunction fetchBeforeMiddleware(config) {\n  const {\n    baseURL,\n    data,\n    headers,\n    method,\n    params,\n    query,\n    url\n  } = config;\n  const METHOD = method.toUpperCase();\n\n  config.method = METHOD;\n  config.url = constructURL(baseURL, url, params, query);\n  config.data = transformData(data, METHOD, headers);\n}\n\n/**\n * @const {Ajaxer} fetch\n * @type {Ajaxer}\n * @public\n * @description Empty instance of Ajaxer.\n */\nconst fetch = new Ajaxer();\n\nexport default Ajaxer;\nexport { Ajaxer, Promise, fetch };\n","import Ajaxer from './lib/Ajaxer';\n\nwindow.Ajaxer = Ajaxer;\n"],"names":["window","global","self","hasOwnProperty","toString","whiteSpace","toStringTag","value","call","slice","isArray","Array","isFunction","isObject","isPrimitive","test","isString","assign","target","objects","source","key","iterate","object","callback","array","iterated","length","map","newObject","trim","string","replace","replaceString","stringToReplace","replacement","split","join","deepClone","clone","deepAssign","hasOwn","property","secret","iterator","Symbol","Math","random","Promise","executor","TypeError","hiddenStatus","hiddenValue","onFulfill","onReject","realPromise","hiddenPromise","status","val","undefined","defineProperties","$$","handled","f","resolve","reject","proxy","err","push","i","onUnhandledRejection","onError","then","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","method","handler","iterable","toResolve","next","done","console","error","bind","absoluteURLRegexp","emptyArray","baseURL","url","params","query","URL","isAbsolute","String","param","encode","queryParams","querySwitcher","prefix","indexOf","postfix","encodeURIComponent","rawHeaders","headers","index","substring","notToTransform","withoutBody","data","JSON","stringify","defaults","location","origin","uploadMethods","Ajaxer","config","ajaxer","request","apply","arguments","conf","before","fetchBeforeMiddleware","defineProperty","setPrototypeOf","prototype","middleware","afterAll","after","unshift","beforeAll","header","dataConfig","urlConfig","xhr","auth","username","password","onprogress","responseType","timeout","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","Error","type","onerror","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","e","send","abort","Function","METHOD","toUpperCase","constructURL","transformData","fetch"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWpheGVyLmpzIiwic291cmNlcyI6WyIuLi9saWIvZ2xvYmFsLmpzIiwiLi4vbGliL3V0aWxzLmpzIiwiLi4vbGliL1Byb21pc2UuanMiLCIuLi9saWIvY29uc3RydWN0VVJMLmpzIiwiLi4vbGliL3BhcnNlSGVhZGVycy5qcyIsIi4uL2xpYi90cmFuc2Zvcm1EYXRhLmpzIiwiLi4vbGliL0FqYXhlci5qcyIsIi4uL2Jyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50IG5vLW5lc3RlZC10ZXJuYXJ5OiAwICovXG4vKiBlc2xpbnQgbm8tbmVnYXRlZC1jb25kaXRpb246IDAgKi9cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG4iLCJjb25zdCB7XG4gIGhhc093blByb3BlcnR5LFxuICB0b1N0cmluZ1xufSA9IHt9O1xuY29uc3Qgd2hpdGVTcGFjZSA9IC9eXFxzKnxcXHMqJC9nO1xuY29uc3QgcHJpbWl0aXZlID0gL14obnVtYmVyfHN0cmluZ3xib29sZWFufHN5bWJvbHx1bmRlZmluZWQpJC87XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmluZ1RhZyh2YWx1ZSkge1xuICByZXR1cm4gdG9TdHJpbmdcbiAgICAuY2FsbCh2YWx1ZSlcbiAgICAuc2xpY2UoOCwgLTEpO1xufVxuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKCh2YWx1ZSkgPT4gKFxuICB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdBcnJheSdcbikpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyaW5nVGFnKHZhbHVlKSA9PT0gJ0Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgaXNGdW5jdGlvbih2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IC9eKG51bWJlcnxzdHJpbmd8Ym9vbGVhbnxzeW1ib2x8dW5kZWZpbmVkKSQvLnRlc3QodHlwZW9mIHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZ1RhZyh2YWx1ZSkgPT09ICdTdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgLi4ub2JqZWN0cykge1xuICBpdGVyYXRlKG9iamVjdHMsIChzb3VyY2UpID0+IHtcbiAgICBpdGVyYXRlKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpdGVyYXRlKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgY29uc3QgYXJyYXkgPSBpc0FycmF5KG9iamVjdCk7XG5cbiAgbGV0IGl0ZXJhdGVkID0gMDtcbiAgY29uc3QgeyBsZW5ndGggfSA9IG9iamVjdCB8fCB7fTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChhcnJheSAmJiBpdGVyYXRlZCsrID49IGxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sob2JqZWN0W2tleV0sIGFycmF5ID8gK2tleSA6IGtleSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcChvYmplY3QsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IG5ld09iamVjdCA9IGlzQXJyYXkob2JqZWN0KVxuICAgID8gW11cbiAgICA6IHt9O1xuXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSkgPT4ge1xuICAgIG5ld09iamVjdFtrZXldID0gY2FsbGJhY2sodmFsdWUsIGtleSwgb2JqZWN0KTtcbiAgfSk7XG5cbiAgcmV0dXJuIG5ld09iamVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSh3aGl0ZVNwYWNlLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlU3RyaW5nKHN0cmluZywgc3RyaW5nVG9SZXBsYWNlLCByZXBsYWNlbWVudCkge1xuICByZXR1cm4gc3RyaW5nXG4gICAgLnNwbGl0KHN0cmluZ1RvUmVwbGFjZSlcbiAgICAuam9pbihyZXBsYWNlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqZWN0KSB7XG4gIGlmIChpc1ByaW1pdGl2ZShvYmplY3QpIHx8IGlzRnVuY3Rpb24ob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICBjb25zdCBjbG9uZSA9IGlzQXJyYXkob2JqZWN0KVxuICAgID8gW11cbiAgICA6IHt9O1xuXG4gIGl0ZXJhdGUob2JqZWN0LCAodmFsdWUsIGtleSkgPT4ge1xuICAgIGNsb25lW2tleV0gPSBkZWVwQ2xvbmUodmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY2xvbmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQXNzaWduKHRhcmdldCwgLi4ub2JqZWN0cykge1xuICBpdGVyYXRlKG9iamVjdHMsIChvYmplY3QpID0+IHtcbiAgICBpdGVyYXRlKG9iamVjdCwgKG9iamVjdCwga2V5KSA9PiB7XG4gICAgICBpZiAoaXNQcmltaXRpdmUob2JqZWN0KSB8fCAhaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBkZWVwQ2xvbmUob2JqZWN0KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNQcmltaXRpdmUodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIGRlZXBBc3NpZ24odGFyZ2V0W2tleV0sIG9iamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPd24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTtcbn1cbiIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBAY2FsbGJhY2sgb25GdWxmaWxsZWRPclJlamVjdGVkXG4gKiBAcHVibGljXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gUHJvbWlzZSB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VjY2VzcyAtIElmIHRoZSBwcmV2aW91cyBwcm9taXNlIGlzIGZ1bGZpbGxlZCBpdCdzIHRydWUgYW5kIGZhbHNlIGlmIHJlamVjdGVkLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uUmVqZWN0ZWRcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7RXJyb3J8Kn0gZXJyIC0gUHJvbWlzZSBlcnJvci5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkZ1bGZpbGxlZFxuICogQHB1YmxpY1xuICogQHBhcmFtIHsqfSB2YWx1ZSAtIFByb21pc2UgdmFsdWUuXG4gKi9cblxuY29uc3Qgc2VjcmV0ID0ge307XG5jb25zdCBpdGVyYXRvciA9IGdsb2JhbC5TeW1ib2xcbiAgPyBTeW1ib2wuaXRlcmF0b3JcbiAgOiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KTtcblxuLyoqXG4gKiBAY2xhc3MgUHJvbWlzZVxuICogQHB1YmxpY1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgLSBGdW5jdGlvbiB0aGF0IHRha2VzIHR3byBhcmd1bWVudHM6IHJlc29sdmUgYW5kIHJlamVjdCBmdW5jdGlvbnMuXG4gKiBDYWxsIHRoZSByZXNvbHZlIGZ1bmN0aW9uIHdoZW4geW91IG5lZWQgdG8gZnVsZmlsbCB0aGUgcHJvbWlzZSBhbmQgY2FsbCB0aGUgcmVqZWN0IG9uZVxuICogd2hlbiB5b3UgbmVlZCB0byByZWplY3QgaXQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gSW5zdGFuY2Ugb2YgUHJvbWlzZS5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZVxuICogQGRlc2NyaXB0aW9uIENsYXNzIHdpdGggYWxtb3N0IGlkZW50aWNhbCBBUEkgdG9cbiAqIFtFUzYgUHJvbWlzZV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZX0uXG4gKiBUaGVyZSBpcyBhIGNvdXBsZSBkaWZmZXJlbmNlczogc2V0IFByb21pc2Uub25FcnJvciB0byBhIGZ1bmN0aW9uIHdpdGggd2hpY2ggeW91IHdhbnQgdG9cbiAqIHN1YnNjcmliZSB0byBhIHByb21pc2UgZXJyb3IgYW5kIHNldCBQcm9taXNlLm9uVW5oYW5kbGVkUmVqZWN0aW9uIHRvIGEgZnVuY3Rpb24gd2l0aCB3aGljaFxuICogeW91IHdhbnQgdG8gc3Vic2NyaWJlIHRvIGFuIHVuaGFuZGxlZCBlcnJvclxuICogKGRlZmF1bHRzIHRvIGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCAnJXMgJW8nLCAnVW5jYXVnaHQgKGluIHByb21pc2UpJykpLlxuICovXG5jbGFzcyBQcm9taXNlIHtcbiAgY29uc3RydWN0b3IoZXhlY3V0b3IpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24oZXhlY3V0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBQcm9taXNlIHJlc29sdmVyICR7IHt9LnRvU3RyaW5nLmNhbGwoZXhlY3V0b3IpIH0gaXMgbm90IGEgZnVuY3Rpb25gKTtcbiAgICB9XG5cbiAgICBsZXQgaGlkZGVuU3RhdHVzO1xuICAgIGxldCBoaWRkZW5WYWx1ZTtcblxuICAgIGNvbnN0XHRvbkZ1bGZpbGwgPSBbXTtcbiAgICBjb25zdCBvblJlamVjdCA9IFtdO1xuICAgIGNvbnN0IHJlYWxQcm9taXNlID0gdGhpcztcbiAgICBjb25zdCBoaWRkZW5Qcm9taXNlID0ge1xuICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICBnZXQgc3RhdHVzKCkge1xuICAgICAgICByZXR1cm4gaGlkZGVuU3RhdHVzO1xuICAgICAgfSxcbiAgICAgIHNldCBzdGF0dXModmFsdWUpIHtcbiAgICAgICAgaGlkZGVuU3RhdHVzID0gdmFsdWU7XG4gICAgICAgIHJlYWxQcm9taXNlLnN0YXR1cyA9IHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGhpZGRlblZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldCB2YWx1ZSh2YWwpIHtcbiAgICAgICAgaGlkZGVuVmFsdWUgPSB2YWw7XG4gICAgICAgIHJlYWxQcm9taXNlLnZhbHVlID0gdmFsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBoaWRkZW5Qcm9taXNlLnN0YXR1cyA9ICdwZW5kaW5nJztcbiAgICBoaWRkZW5Qcm9taXNlLnZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcy4kJCA9IHt9LCB7XG4gICAgICBoYW5kbGVkOiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gaGlkZGVuUHJvbWlzZS5oYW5kbGVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQoa2V5KSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gc2VjcmV0KSB7XG4gICAgICAgICAgICBoaWRkZW5Qcm9taXNlLmhhbmRsZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhhbmRsZToge1xuICAgICAgICB2YWx1ZShzdGF0dXMsIGYsIHJlc29sdmUsIHJlamVjdCwga2V5KSB7XG4gICAgICAgICAgaWYgKGtleSA9PT0gc2VjcmV0KSB7XG4gICAgICAgICAgICBsZXQgcHJveHkgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihmKSkge1xuICAgICAgICAgICAgICBwcm94eSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGYodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ3Jlc29sdmUnKSB7XG4gICAgICAgICAgICAgIG9uRnVsZmlsbC5wdXNoKHByb3h5IHx8ICgodmFsdWUpID0+IHJlc29sdmUodmFsdWUpKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gJ3JlamVjdCcpIHtcbiAgICAgICAgICAgICAgb25SZWplY3QucHVzaChwcm94eSB8fCAoKGVycikgPT4gcmVqZWN0KGVycikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdGF0dXM6IHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBoaWRkZW5Qcm9taXNlLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gaGlkZGVuUHJvbWlzZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gICAgICBpZiAoaGlkZGVuUHJvbWlzZS5zdGF0dXMgPT09ICdwZW5kaW5nJykge1xuICAgICAgICBoaWRkZW5Qcm9taXNlLnN0YXR1cyA9ICdyZWplY3RlZCc7XG4gICAgICAgIGhpZGRlblByb21pc2UudmFsdWUgPSBlcnI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IG9uUmVqZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaGlkZGVuUHJvbWlzZS5oYW5kbGVkID0gdHJ1ZTtcblxuICAgICAgICAgIG9uUmVqZWN0W2ldKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgb25VbmhhbmRsZWRSZWplY3Rpb24sXG4gICAgICAgICAgb25FcnJvclxuICAgICAgICB9ID0gUHJvbWlzZTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvbkVycm9yKSkge1xuICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghaGlkZGVuUHJvbWlzZS5oYW5kbGVkICYmIGlzRnVuY3Rpb24ob25VbmhhbmRsZWRSZWplY3Rpb24pKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZFJlamVjdGlvbihlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgaWYgKGhpZGRlblByb21pc2Uuc3RhdHVzID09PSAncGVuZGluZycpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbikpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaGlkZGVuUHJvbWlzZS5zdGF0dXMgPSAnZnVsZmlsbGVkJztcbiAgICAgICAgaGlkZGVuUHJvbWlzZS52YWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBvbkZ1bGZpbGwubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBoaWRkZW5Qcm9taXNlLmhhbmRsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgb25GdWxmaWxsW2ldKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIFByb21pc2UuYWxsXG4gICAqIEBwYXJhbSB7KEFycmF5fEl0ZXJhYmxlKS48UHJvbWlzZXwqPn0gaXRlcmFibGUgLSBJdGVyYWJsZSBvYmplY3QgKGxpa2UgYXJyYXkpIG9mIHByb21pc2VzXG4gICAqIG9yIGFueSB2YWx1ZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBOZXcgaW5zdGFuY2Ugb2YgUHJvbWlzZS5cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9Qcm9taXNlL2FsbFxuICAgKi9cbiAgc3RhdGljIGFsbChpdGVyYWJsZSkge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG5cbiAgICBsZXQgdG9SZXNvbHZlID0gMDtcblxuICAgIGlmIChpdGVyYWJsZVtpdGVyYXRvcl0pIHtcbiAgICAgIGl0ZXJhYmxlID0gaXRlcmFibGVbaXRlcmF0b3JdKCk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuICAgICAgICBsZXQgaSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKCEobmV4dCA9IGl0ZXJhYmxlLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUobmV4dC52YWx1ZSk7XG5cbiAgICAgICAgICB0b1Jlc29sdmUrKztcblxuICAgICAgICAgICgoaSkgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICB0b1Jlc29sdmUtLTtcbiAgICAgICAgICAgICAgYXJyYXlbaV0gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5kb25lICYmICF0b1Jlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXJyYXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgIH0pKGkrKyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWkpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgbGVuZ3RoID0gaXRlcmFibGUubGVuZ3RoO1xuXG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIHRvUmVzb2x2ZSA9IGxlbmd0aDtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoaXRlcmFibGVbaV0pO1xuXG4gICAgICAgIHByb21pc2UudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICB0b1Jlc29sdmUtLTtcbiAgICAgICAgICBhcnJheVtpXSA9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKCF0b1Jlc29sdmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYXJyYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIFByb21pc2UucmFjZVxuICAgKiBAcGFyYW0geyhBcnJheXxJdGVyYWJsZSkuPFByb21pc2V8Kj59IGl0ZXJhYmxlIC0gSXRlcmFibGUgb2JqZWN0IChsaWtlIGFycmF5KSBvZiBwcm9taXNlc1xuICAgKiBvciBhbnkgdmFsdWVzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gTmV3IGluc3RhbmNlIG9mIFByb21pc2UuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZS9yYWNlXG4gICAqL1xuICBzdGF0aWMgcmFjZShpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZVtpdGVyYXRvcl0pIHtcbiAgICAgIGl0ZXJhYmxlID0gaXRlcmFibGVbaXRlcmF0b3JdKCk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBuZXh0O1xuXG4gICAgICAgIHdoaWxlICghKG5leHQgPSBpdGVyYWJsZS5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBpdGVyYWJsZS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYWJsZVtpXS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBQcm9taXNlLnJlamVjdFxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gcmVqZWN0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gTmV3IGluc3RhbmNlIG9mIFByb21pc2UuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZS9yZWplY3RcbiAgICovXG4gIHN0YXRpYyByZWplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVqZWN0KHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIFByb21pc2UucmVzb2x2ZVxuICAgKiBAcGFyYW0ge1Byb21pc2V8VGhlbmFibGV8Kn0gdmFsdWUgLSBQcm9taXNlLCB0aGVuYWJsZSBvciBhbnkgdmFsdWUgdG8gcmVzb2x2ZS5cbiAgICogQHJldHVybnMge1Byb21pc2V9IE5ldyBpbnN0YW5jZSBvZiBQcm9taXNlLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UvcmVzb2x2ZVxuICAgKi9cbiAgc3RhdGljIHJlc29sdmUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBhYm9ydCgpIHt9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgUHJvbWlzZSNjYXRjaFxuICAgKiBAcGFyYW0ge29uUmVqZWN0ZWR9IG9uUmVqZWN0ZWQgLSBvblJlamVjdGVkIGNhbGxiYWNrLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gTmV3IGluc3RhbmNlIG9mIFByb21pc2UuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZS9jYXRjaFxuICAgKi9cbiAgY2F0Y2gob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBQcm9taXNlI2ZpbmFsbHlcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge29uRnVsZmlsbGVkT3JSZWplY3RlZH0gb25GdWxmaWxsZWRPclJlamVjdGVkIC0gb25GdWxmaWxsZWRPclJlamVjdGVkIGNhbGxiYWNrLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgY2F0Y2hpbmcgYm90aCBmdWxmaWxsZWQgYW5kIHJlamVjdGVkIHByb21pc2VzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBzcGlubmVyLnNob3coKTtcbiAgICogZmV0Y2hEYXRhKClcbiAgICogICAudGhlbigoZGF0YSkgPT4ge1xuICAgKiAgICAgLy8gZG8gc29tZXRoaW5nIHdpdGggZGF0YVxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICogICAgIC8vIGhhbmRsZSBlcnJvciBzb21laG93XG4gICAqICAgfSlcbiAgICogICAuZmluYWxseSgoKSA9PiB7XG4gICAqICAgICBzcGlubmVyLmhpZGUoKTtcbiAgICogICB9KTtcbiAgICovXG4gIGZpbmFsbHkob25GdWxmaWxsZWRPclJlamVjdGVkKSB7XG4gICAgY29uc3QgaXNGdW5jID0gaXNGdW5jdGlvbihvbkZ1bGZpbGxlZE9yUmVqZWN0ZWQpO1xuXG4gICAgcmV0dXJuIHRoaXMudGhlbigodmFsdWUpID0+IChcbiAgICAgIFByb21pc2VcbiAgICAgICAgLnJlc29sdmUoXG4gICAgICAgICAgaXNGdW5jXG4gICAgICAgICAgICA/IG9uRnVsZmlsbGVkT3JSZWplY3RlZCh2YWx1ZSwgdHJ1ZSlcbiAgICAgICAgICAgIDogMFxuICAgICAgICApXG4gICAgICAgIC50aGVuKCgpID0+IHZhbHVlKVxuICAgICksIChlcnIpID0+IChcbiAgICAgIFByb21pc2VcbiAgICAgICAgLnJlc29sdmUoXG4gICAgICAgICAgaXNGdW5jXG4gICAgICAgICAgICA/IG9uRnVsZmlsbGVkT3JSZWplY3RlZChlcnIsIGZhbHNlKVxuICAgICAgICAgICAgOiAwXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oKCkgPT4gUHJvbWlzZS5yZWplY3QoZXJyKSlcbiAgICApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIFByb21pc2UjdGhlblxuICAgKiBAcGFyYW0ge29uRnVsZmlsbGVkfSBbb25GdWxmaWxsZWRdIC0gb25GdWxmaWxsZWQgY2FsbGJhY2suXG4gICAqIEBwYXJhbSB7b25SZWplY3RlZH0gW29uUmVqZWN0ZWRdIC0gb25SZWplY3RlZCBjYWxsYmFjay5cbiAgICogQHJldHVybnMge1Byb21pc2V9IE5ldyBpbnN0YW5jZSBvZiBQcm9taXNlLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1Byb21pc2UvdGhlblxuICAgKi9cbiAgdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLiQkO1xuXG4gICAgaWYgKHByb21pc2Uuc3RhdHVzID09PSAncGVuZGluZycpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHByb21pc2UuaGFuZGxlKCdyZWplY3QnLCBvblJlamVjdGVkLCByZXNvbHZlLCByZWplY3QsIHNlY3JldCk7XG4gICAgICAgIHByb21pc2UuaGFuZGxlKCdyZXNvbHZlJywgb25GdWxmaWxsZWQsIHJlc29sdmUsIHJlamVjdCwgc2VjcmV0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb21pc2UuaGFuZGxlZCA9IHNlY3JldDtcblxuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHByb21pc2U7XG5cbiAgICBsZXQgbWV0aG9kO1xuICAgIGxldCBoYW5kbGVyO1xuXG4gICAgaWYgKHByb21pc2Uuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgbWV0aG9kID0gJ3Jlc29sdmUnO1xuICAgICAgaGFuZGxlciA9IG9uRnVsZmlsbGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXRob2QgPSAncmVqZWN0JztcbiAgICAgIGhhbmRsZXIgPSBvblJlamVjdGVkO1xuICAgIH1cblxuICAgIGlmICghaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgcmV0dXJuIFByb21pc2VbbWV0aG9kXSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFuZGxlcih2YWx1ZSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgfVxuICB9XG59XG5cblByb21pc2Uub25FcnJvciA9IG51bGw7XG5Qcm9taXNlLm9uVW5oYW5kbGVkUmVqZWN0aW9uID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICclcyAlbycsICdVbmNhdWdodCAoaW4gcHJvbWlzZSknKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsImltcG9ydCB7XG4gIGlzQXJyYXksXG4gIGlzT2JqZWN0LFxuICBpdGVyYXRlLFxuICBtYXAsXG4gIHJlcGxhY2VTdHJpbmdcbn0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGFic29sdXRlVVJMUmVnZXhwID0gL14oKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC98ZGF0YTpbYS16XStcXC9bYS16XSs7YmFzZTY0LCkvaTtcbmNvbnN0IGVtcHR5QXJyYXkgPSBbXTtcblxuZXhwb3J0IGRlZmF1bHQgKGJhc2VVUkwsIHVybCwgcGFyYW1zLCBxdWVyeSkgPT4ge1xuICBsZXQgVVJMID0gaXNBYnNvbHV0ZSh1cmwpXG4gICAgPyB1cmxcbiAgICA6IGAkeyBTdHJpbmcoYmFzZVVSTCkucmVwbGFjZSgvXFwvKyQvLCAnJykgfS8keyBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXFwvKy8sICcnKSB9YDtcblxuICBpdGVyYXRlKHBhcmFtcywgKHZhbHVlLCBwYXJhbSkgPT4ge1xuICAgIFVSTCA9IHJlcGxhY2VTdHJpbmcoVVJMLCBgOiR7IHBhcmFtIH1gLCBlbmNvZGUodmFsdWUpKTtcbiAgfSk7XG5cbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBxdWVyeVN3aXRjaGVyKHF1ZXJ5LCAnJyk7XG5cbiAgaWYgKHF1ZXJ5UGFyYW1zLmxlbmd0aCkge1xuICAgIGNvbnN0IHByZWZpeCA9IFVSTC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnO1xuICAgIGNvbnN0IHBvc3RmaXggPSBtYXAocXVlcnlQYXJhbXMsICh7IHBhcmFtLCB2YWx1ZSB9KSA9PiAoXG4gICAgICBgJHsgZW5jb2RlKHBhcmFtKSB9PSR7IGVuY29kZSh2YWx1ZSkgfWBcbiAgICApKS5qb2luKCcmJyk7XG5cbiAgICBVUkwgKz0gcHJlZml4ICsgcG9zdGZpeDtcbiAgfVxuXG4gIHJldHVybiBVUkw7XG59O1xuXG5mdW5jdGlvbiBpc0Fic29sdXRlKHVybCkge1xuICByZXR1cm4gYWJzb2x1dGVVUkxSZWdleHAudGVzdCh1cmwpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGUoc3RyaW5nKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gcXVlcnlTd2l0Y2hlcihxdWVyeSwgcHJlZml4KSB7XG4gIC8qIGVzbGludCBpbmRlbnQ6IDAgKi9cbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBpc0FycmF5KHF1ZXJ5KToge1xuICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSBbXTtcblxuICAgICAgaXRlcmF0ZShxdWVyeSwgKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcXVlcnlQYXJhbXMucHVzaCguLi5xdWVyeVN3aXRjaGVyKHZhbHVlLCBgJHsgcHJlZml4IH1bXWApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXJ5UGFyYW1zLnB1c2goe1xuICAgICAgICAgIHBhcmFtOiBgJHsgcHJlZml4IH1bXWAsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHF1ZXJ5UGFyYW1zO1xuICAgIH1cblxuICAgIGNhc2UgaXNPYmplY3QocXVlcnkpOiB7XG4gICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IFtdO1xuXG4gICAgICBpdGVyYXRlKHF1ZXJ5LCAodmFsdWUsIHBhcmFtKSA9PiB7XG4gICAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKC4uLnF1ZXJ5U3dpdGNoZXIodmFsdWUsIHByZWZpeCA/IGAkeyBwcmVmaXggfVskeyBwYXJhbSB9XWAgOiBwYXJhbSkpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVlcnlQYXJhbXMucHVzaCh7XG4gICAgICAgICAgcGFyYW06IHByZWZpeCA/IGAkeyBwcmVmaXggfVskeyBwYXJhbSB9XWAgOiBwYXJhbSxcbiAgICAgICAgICB2YWx1ZTogU3RyaW5nKHZhbHVlKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcXVlcnlQYXJhbXM7XG4gICAgfVxuXG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIGVtcHR5QXJyYXk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge1xuICBpdGVyYXRlLFxuICB0cmltXG59IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCAocmF3SGVhZGVycykgPT4ge1xuICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgaXRlcmF0ZSgocmF3SGVhZGVycyB8fCAnJykuc3BsaXQoJ1xcbicpLCAodmFsdWUpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHZhbHVlLmluZGV4T2YoJzonKTtcbiAgICBjb25zdCBrZXkgPSB0cmltKHZhbHVlLnN1YnN0cmluZygwLCBpbmRleCkpO1xuICAgIGNvbnN0IHZhbCA9IHRyaW0odmFsdWUuc3Vic3RyaW5nKGluZGV4ICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaGVhZGVyc1trZXldID0gKGhlYWRlcnNba2V5XSA/IGAkeyBoZWFkZXJzW2tleV0gfSwgYCA6ICcnKSArIHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBoZWFkZXJzO1xufTtcbiIsImltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICB0b1N0cmluZ1RhZ1xufSBmcm9tICcuL3V0aWxzJztcblxuY29uc3Qgbm90VG9UcmFuc2Zvcm0gPSBbJ0Zvcm1EYXRhJywgJ0ZpbGUnLCAnQmxvYicsICdBcnJheUJ1ZmZlcicsICdTdHJpbmcnLCAnTnVtYmVyJ107XG5jb25zdCB3aXRob3V0Qm9keSA9IFsnREVMRVRFJywgJ0dFVCcsICdIRUFEJ107XG5cbmV4cG9ydCBkZWZhdWx0IChkYXRhLCBtZXRob2QsIGhlYWRlcnMpID0+IHtcbiAgaWYgKHdpdGhvdXRCb2R5LmluZGV4T2YobWV0aG9kKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc09iamVjdChkYXRhKSAmJiBub3RUb1RyYW5zZm9ybS5pbmRleE9mKHRvU3RyaW5nVGFnKGRhdGEpKSA9PT0gLTEpIHtcbiAgICBpZiAoIWhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSB7XG4gICAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsImltcG9ydCB7XG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyaW5nLFxuICBhc3NpZ24sXG4gIGl0ZXJhdGUsXG4gIGRlZXBBc3NpZ24sXG4gIGRlZXBDbG9uZSxcbiAgaGFzT3duXG59IGZyb20gJy4vdXRpbHMnO1xuXG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuL1Byb21pc2UnO1xuXG5pbXBvcnQgY29uc3RydWN0VVJMIGZyb20gJy4vY29uc3RydWN0VVJMJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi9wYXJzZUhlYWRlcnMnO1xuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7J2dldCd8J3Bvc3QnfCdkZWxldGUnfCdoZWFkJ3wncHV0J3wncGF0Y2gnfSBBamF4ZXJNZXRob2RcbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFqYXhlckNvbmZpZ1xuICogQHB1YmxpY1xuICogQHByb3BlcnR5IHtBcnJheS48QWpheGVyQWZ0ZXJNaWRkbGV3YXJlfEFqYXhlckVycm9yQWZ0ZXJNaWRkbGV3YXJlPn0gW2FmdGVyXVxuICogQHByb3BlcnR5IHtPYmplY3R9IFthdXRoXVxuICogQHByb3BlcnR5IHtTdHJpbmd9IFthdXRoLnVzZXJuYW1lXVxuICogQHByb3BlcnR5IHtTdHJpbmd9IFthdXRoLnBhc3N3b3JkXVxuICogQHByb3BlcnR5IHtTdHJpbmd9IFtiYXNlVVJMXVxuICogQHByb3BlcnR5IHtBcnJheS48QWpheGVyQmVmb3JlTWlkZGxld2FyZXxBamF4ZXJFcnJvckJlZm9yZU1pZGRsZXdhcmU+fSBbYmVmb3JlXVxuICogQHByb3BlcnR5IHsqfSBbZGF0YV1cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxTdHJpbmcsIFN0cmluZz59IFtoZWFkZXJzXVxuICogQHByb3BlcnR5IHtBamF4ZXJNZXRob2R9IFttZXRob2RdXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3BhcmFtc11cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbcXVlcnldXG4gKiBAcHJvcGVydHkge1N0cmluZ30gW3Jlc3BvbnNlVHlwZV1cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbdGltZW91dF1cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbdXJsXVxuICogQHByb3BlcnR5IHtCb29sZWFufSBbd2l0aENyZWRlbnRpYWxzXVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQWpheGVyUmVzcG9uc2VcbiAqIEBwdWJsaWNcbiAqIEBwcm9wZXJ0eSB7QWpheGVyQ29uZmlnfSBjb25maWdcbiAqIEBwcm9wZXJ0eSB7Kn0gZGF0YVxuICogQHByb3BlcnR5IHtPYmplY3QuPFN0cmluZywgU3RyaW5nPn0gaGVhZGVyc1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IHN0YXR1c1xuICogQHByb3BlcnR5IHtTdHJpbmd9IHN0YXR1c1RleHRcbiAqIEBwcm9wZXJ0eSB7WE1MSHR0cFJlcXVlc3R9IHhoclxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEFqYXhlckFmdGVyTWlkZGxld2FyZVxuICogQHB1YmxpY1xuICogQHBhcmFtIHtBamF4ZXJSZXNwb25zZX0gY29uZmlnIC0gQWpheGVyIHJlc3BvbnNlLlxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIEFqYXhlckVycm9yQWZ0ZXJNaWRkbGV3YXJlXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge0Vycm9yfCp9IGVyciAtIFRocm93biBlcnJvci5cbiAqIEBwYXJhbSB7QWpheGVyUmVzcG9uc2V9IGNvbmZpZyAtIEFqYXhlciByZXNwb25zZS5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBBamF4ZXJCZWZvcmVNaWRkbGV3YXJlXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge0FqYXhlckNvbmZpZ30gY29uZmlnIC0gQWpheGVyIGNvbmZpZy5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBBamF4ZXJFcnJvckJlZm9yZU1pZGRsZXdhcmVcbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7RXJyb3J8Kn0gZXJyIC0gVGhyb3duIGVycm9yLlxuICogQHBhcmFtIHtBamF4ZXJDb25maWd9IGNvbmZpZyAtIEFqYXhlciBjb25maWcuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgQWpheGVyQ29uZmlnRnVuY3Rpb25cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7QWpheGVyQ29uZmlnfSBjb25maWdcbiAqL1xuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgYWZ0ZXI6IFtdLFxuICBhdXRoOiB7XG4gICAgdXNlcm5hbWU6ICcnLFxuICAgIHBhc3N3b3JkOiAnJ1xuICB9LFxuICBiYXNlVVJMOiBnbG9iYWwubG9jYXRpb24ub3JpZ2luLFxuICBiZWZvcmU6IFtdLFxuICBkYXRhOiBudWxsLFxuICBoZWFkZXJzOiB7fSxcbiAgbWV0aG9kOiAnZ2V0JyxcbiAgcGFyYW1zOiB7fSxcbiAgcXVlcnk6IHt9LFxuICByZXNwb25zZVR5cGU6ICcnLFxuICB0aW1lb3V0OiAwLFxuICB1cmw6ICcnLFxuICB3aXRoQ3JlZGVudGlhbHM6IGZhbHNlXG59O1xuY29uc3QgdXBsb2FkTWV0aG9kcyA9IFsnUE9TVCcsICdQVVQnXTtcblxuLyoqXG4gKiBAY2xhc3MgQWpheGVyXG4gKiBAZXh0ZW5kcyBGdW5jdGlvblxuICogQHB1YmxpY1xuICogQHBhcmFtIHtBamF4ZXJDb25maWd9IFtjb25maWcgPSB7fV0gLSBDb25maWcgdG8gYWRkLlxuICogQHJldHVybnMge0FqYXhlcn0gSW5zdGFuY2Ugb2YgQWpheGVyLlxuICogQW4gaW5zdGFuY2Ugb2YgQWpheGVyIGlzIGEgZnVuY3Rpb24gdGhhdCBzaW1wbHkgY2FsbHMgI3JlcXVlc3Qgd2l0aCB0aGUgc2FtZSBhcmd1bWVudHMuXG4gKiBAZGVzY3JpcHRpb24gQ2xhc3MgZm9yIGZldGNoaW5nIGRhdGEuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGFqYXhlciA9IG5ldyBBamF4ZXIoKTtcbiAqXG4gKiBhamF4ZXIoJy9kYXRhJykudGhlbigocmVzKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKHJlcyk7XG4gKiB9KTtcbiAqL1xuY2xhc3MgQWpheGVyIGV4dGVuZHMgRnVuY3Rpb24ge1xuICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBmdW5jdGlvbiBhamF4ZXIoKSB7XG4gICAgICByZXR1cm4gYWpheGVyLnJlcXVlc3QuYXBwbHkoYWpheGVyLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmYgPSBkZWVwQXNzaWduKHt9LCBkZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGlmIChjb25mLmJlZm9yZS5pbmRleE9mKGZldGNoQmVmb3JlTWlkZGxld2FyZSkgPT09IC0xKSB7XG4gICAgICBjb25mLmJlZm9yZS5wdXNoKGZldGNoQmVmb3JlTWlkZGxld2FyZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1lbWJlciB7QWpheGVyQ29uZmlnfSBBamF4ZXIjJCRcbiAgICAgKiBAdHlwZSB7QWpheGVyQ29uZmlnfVxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAZGVzY3JpcHRpb24gQWpheGVyIGNvbmZpZy5cbiAgICAgKi9cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWpheGVyLCAnJCQnLCB7IHZhbHVlOiBjb25mIH0pO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihhamF4ZXIsIEFqYXhlci5wcm90b3R5cGUpO1xuXG4gICAgcmV0dXJuIGFqYXhlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIEFqYXhlciNhZnRlclxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7QWpheGVyQWZ0ZXJNaWRkbGV3YXJlfEFqYXhlckVycm9yQWZ0ZXJNaWRkbGV3YXJlfSBtaWRkbGV3YXJlIC0gTWlkZGxld2FyZSB0byBhZGQuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbnwqfSBbYWZ0ZXJBbGwgPSB0cnVlXSAtIEJvb2xlYW4gcGFyYW1ldGVyIHdoZXJlIHRvIHB1dCB0aGUgbWlkZGxld2FyZS5cbiAgICogVHJ1dGh5IHBhcmFtZXRlciBzdGFuZHMgZm9yIFwidG8gdGhlIGVuZFwiIGFuZCBmYWxzZXkgZm9yIFwidG8gdGhlIGJlZ2lubmluZ1wiLlxuICAgKiBAcmV0dXJucyB7QWpheGVyfSBSZXR1cm5zIHRoaXMuXG4gICAqIEBkZXNjcmlwdGlvbiBNaWRkbGV3YXJlIHRoYXQgaXMgY2FsbGVkIGFmdGVyIHRoZSByZXF1ZXN0LlxuICAgKiBJZiB0aGUgbWlkZGxld2FyZSBoYXMgMiBvciBsZXNzIGFyZ3VtZW50cyBpdCdzIHRyZWF0ZWQgYXMgc3VjY2VzcyBtaWRkbGV3YXJlIG90aGVyd2lzZSBhcyBhbiBlcnJvciBvbmUuXG4gICAqIElmIHRoZSBtaWRkbGV3YXJlIHJldHVybnMgYSBwcm9taXNlIGl0IGJlY29tZXMgYSBwYXJ0IG9mIHRoZSBtaWRkbGV3YXJlIGNoYWluLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBhamF4ZXIgPSBuZXcgQWpheGVyKClcbiAgICogICAuYWZ0ZXIoKGVyciwgcmVzKSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgKlxuICAgKiAgICAgdGhyb3cgZXJyO1xuICAgKiAgIH0pXG4gICAqICAgLmFmdGVyKChyZXMpID0+IHtcbiAgICogICAgIHJlcy5qc29uID0gSlNPTi5wYXJzZShyZXMuZGF0YSk6XG4gICAqICAgfSk7XG4gICAqL1xuICBhZnRlcihtaWRkbGV3YXJlLCBhZnRlckFsbCA9IHRydWUpIHtcbiAgICBjb25zdCB7IGFmdGVyIH0gPSB0aGlzLiQkO1xuXG4gICAgaWYgKGFmdGVyQWxsKSB7XG4gICAgICBhZnRlci5wdXNoKG1pZGRsZXdhcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlci51bnNoaWZ0KG1pZGRsZXdhcmUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgQWpheGVyI2JlZm9yZVxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7QWpheGVyQmVmb3JlTWlkZGxld2FyZXxBamF4ZXJFcnJvckJlZm9yZU1pZGRsZXdhcmV9IG1pZGRsZXdhcmUgLSBNaWRkbGV3YXJlIHRvIGFkZC5cbiAgICogQHBhcmFtIHtCb29sZWFufCp9IFtiZWZvcmVBbGwgPSB0cnVlXSAtIEJvb2xlYW4gcGFyYW1ldGVyIHdoZXJlIHRvIHB1dCB0aGUgbWlkZGxld2FyZS5cbiAgICogVHJ1dGh5IHBhcmFtZXRlciBzdGFuZHMgZm9yIFwidG8gdGhlIGJlZ2lubmluZ1wiIGFuZCBmYWxzZXkgZm9yIFwidG8gdGhlIGVuZFwiLlxuICAgKiBAcmV0dXJucyB7QWpheGVyfSBSZXR1cm5zIHRoaXMuXG4gICAqIEBkZXNjcmlwdGlvbiBNaWRkbGV3YXJlIHRoYXQgaXMgY2FsbGVkIGJlZm9yZSB0aGUgcmVxdWVzdC5cbiAgICogSWYgdGhlIG1pZGRsZXdhcmUgaGFzIDIgb3IgbGVzcyBhcmd1bWVudHMgaXQncyB0cmVhdGVkIGFzIHN1Y2Nlc3MgbWlkZGxld2FyZSBvdGhlcndpc2UgYXMgYW4gZXJyb3Igb25lLlxuICAgKiBJZiB0aGUgbWlkZGxld2FyZSByZXR1cm5zIGEgcHJvbWlzZSBpdCBiZWNvbWVzIGEgcGFydCBvZiB0aGUgbWlkZGxld2FyZSBjaGFpbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgYWpheGVyID0gbmV3IEFqYXhlcigpXG4gICAqICAgLmJlZm9yZSgoZXJyLCByZXEpID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAqXG4gICAqICAgICB0aHJvdyBlcnI7XG4gICAqICAgfSlcbiAgICogICAuYmVmb3JlKChyZXEpID0+IHtcbiAgICogICAgIGlmIChyZXEudXJsID09PSAnL3ZlcnlMb25nUmVxdWVzdCcpIHtcbiAgICogICAgICAgcmVxLnRpbWVvdXQgPSAzMDAwMDtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICovXG4gIGJlZm9yZShtaWRkbGV3YXJlLCBiZWZvcmVBbGwgPSB0cnVlKSB7XG4gICAgY29uc3QgeyBiZWZvcmUgfSA9IHRoaXMuJCQ7XG5cbiAgICBpZiAoYmVmb3JlQWxsKSB7XG4gICAgICBiZWZvcmUudW5zaGlmdChtaWRkbGV3YXJlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmVmb3JlLnB1c2gobWlkZGxld2FyZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBBamF4ZXIjY29uZmlnXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd8QWpheGVyQ29uZmlnfEFqYXhlckNvbmZpZ0Z1bmN0aW9ufSBbcHJvcGVydHldIC0gSWYgaXQncyBhIGZ1bmN0aW9uXG4gICAqIGl0J3MgY2FsbGVkIHdpdGggdGhlIGZldGNoIGNvbmZpZyBhcmd1bWVudCwgaWYgaXQncyBhIHN0cmluZyB0aGUgdmFsdWUgYXJndW1lbnRcbiAgICogaXMgdXNlZCBmb3IgYXNzaWduaW5nIHRoaXMgcHJvcGVydHkgdG8gdGhlIGZldGNoIGNvbmZpZ1xuICAgKiBvdGhlcndpc2UgaXQncyBhc3NpZ25lZCB0byB0aGUgZmV0Y2ggY29uZmlnLlxuICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gLSBTZWUgdGhlIHByb3BlcnR5IGFyZ3VtZW50LlxuICAgKiBAcmV0dXJucyB7QWpheGVyfEFqYXhlckNvbmZpZ30gSWYgdGhlIGFyZ3VtZW50IGlzIHByZXNlbnQgdGhpcyBpcyByZXR1cm5lZCBvdGhlcndpc2UgdGhlIGZldGNoIGNvbmZpZyBpcyByZXR1cm5lZC5cbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgZ2V0dGluZyBhbmQgc2V0dGluZyBjb25maWcuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGFqYXhlciA9IG5ldyBBamF4ZXIoKTtcbiAgICpcbiAgICogYWpheGVyLmNvbmZpZyh7IGJhc2VVUkw6IDUwMDAgfSk7XG4gICAqIGFqYXhlci5jb25maWcoKS50aW1lb3V0OyAvLyA1MDAwXG4gICAqXG4gICAqIGFqYXhlci5jb25maWcoKGNvbmZpZykgPT4ge1xuICAgKiAgIGNvbmZpZy5iYXNlVVJMICs9ICcvYXBpJztcbiAgICogfSk7XG4gICAqL1xuICBjb25maWcocHJvcGVydHksIHZhbHVlKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy4kJDtcblxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihwcm9wZXJ0eSkpIHtcbiAgICAgIHByb3BlcnR5KGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgcHJvcGVydHkgPSB7IFtwcm9wZXJ0eV06IHZhbHVlIH07XG4gICAgICB9XG5cbiAgICAgIGRlZXBBc3NpZ24oY29uZmlnLCBwcm9wZXJ0eSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBBamF4ZXIjZGVsZXRlXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEBwYXJhbSB7QWpheGVyQ29uZmlnfSBbY29uZmlnXSAtIFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48QWpheGVyUmVzcG9uc2UsIEVycm9yPn0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEBkZXNjcmlwdGlvbiBTaG9ydGhhbmQgZm9yICNyZXF1ZXN0IGZvciBkZWxldGUgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGFqYXhlci5kZWxldGUoJy9kYXRhJykudGhlbigocmVzKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2cocmVzKTtcbiAgICogfSk7XG4gICAqL1xuICBkZWxldGUodXJsLCBjb25maWcgPSB7fSkge1xuICAgIGlmICghaXNTdHJpbmcodXJsKSkge1xuICAgICAgY29uZmlnID0gdXJsO1xuICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCBhc3NpZ24oeyBtZXRob2Q6ICdkZWxldGUnIH0sIGNvbmZpZykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgQWpheGVyI2dldFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbdXJsXSAtIFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAcGFyYW0ge0FqYXhlckNvbmZpZ30gW2NvbmZpZ10gLSBTZWUge0BsaW5rIEFqYXhlciNyZXF1ZXN0fS5cbiAgICogQHJldHVybnMge1Byb21pc2UuPEFqYXhlclJlc3BvbnNlLCBFcnJvcj59IFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAZGVzY3JpcHRpb24gU2hvcnRoYW5kIGZvciAjcmVxdWVzdCBmb3IgZ2V0IHJlcXVlc3RzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhamF4ZXIuZ2V0KCcvZGF0YScpLnRoZW4oKHJlcykgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAqIH0pO1xuICAgKi9cbiAgZ2V0KHVybCwgY29uZmlnID0ge30pIHtcbiAgICBpZiAoIWlzU3RyaW5nKHVybCkpIHtcbiAgICAgIGNvbmZpZyA9IHVybDtcbiAgICAgIHVybCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHVybCwgYXNzaWduKHsgbWV0aG9kOiAnZ2V0JyB9LCBjb25maWcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIEFqYXhlciNoZWFkXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEBwYXJhbSB7QWpheGVyQ29uZmlnfSBbY29uZmlnXSAtIFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZS48QWpheGVyUmVzcG9uc2UsIEVycm9yPn0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEBkZXNjcmlwdGlvbiBTaG9ydGhhbmQgZm9yICNyZXF1ZXN0IGZvciBoZWFkIHJlcXVlc3RzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhamF4ZXIuaGVhZCgnL2RhdGEnKS50aGVuKChyZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xuICAgKiB9KTtcbiAgICovXG4gIGhlYWQodXJsLCBjb25maWcgPSB7fSkge1xuICAgIGlmICghaXNTdHJpbmcodXJsKSkge1xuICAgICAgY29uZmlnID0gdXJsO1xuICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCBhc3NpZ24oeyBtZXRob2Q6ICdoZWFkJyB9LCBjb25maWcpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIEFqYXhlciNoZWFkZXJzXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0LjxTdHJpbmcsIFN0cmluZz59IGhlYWRlciAtIEEgaGVhZGVyIHN0cmluZyBvciBhbiBvYmplY3Qgb2YgdGhlIGZvbGxvd2luZyBmb3JtYXQ6XG4gICAqIHsgW2hlYWRlcl06IFt2YWx1ZTEsIHZhbHVlMiwgLi4uXSB9LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3ZhbHVlXSAtIEhlYWRlciB2YWx1ZS4gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3RyaW5nXG4gICAqIHRoaXMgaGFzIHRvIGJlIGEgaGVhZGVyIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7QWpheGVyfSBSZXR1cm5zIHRoaXMuXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgZm9yIHNldHRpbmcgcmVxdWVzdCBoZWFkZXJzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhamF4ZXJcbiAgICogICAuaGVhZGVycygnTXktSGVhZGVyJywgJ1ZhbHVlJylcbiAgICogICAuaGVhZGVycyh7XG4gICAqICAgICAnTXktQW5vdGhlci1IZWFkZXInOiAnVmFsdWUyJ1xuICAgKiAgIH0pO1xuICAgKi9cbiAgaGVhZGVycyhoZWFkZXIsIHZhbHVlKSB7XG4gICAgY29uc3QgeyBoZWFkZXJzIH0gPSB0aGlzLiQkO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgaGVhZGVyID0geyBbaGVhZGVyXTogdmFsdWUgfTtcbiAgICB9XG5cbiAgICBpdGVyYXRlKGhlYWRlciwgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGhlYWRlcnNbaGVhZGVyXSA9IHZhbHVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBBamF4ZXIjaW5zdGFuY2VcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge0FqYXhlckNvbmZpZ30gW2NvbmZpZ10gLSBOZXcgY29uZmlnIGlmIG5lZWRlZC5cbiAgICogQHJldHVybnMge0FqYXhlcn0gTmV3IGluc3RhbmNlIG9mIEFqYXhlci5cbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBmb3IgY3JlYXRpbmcgbmV3IGFqYXhlciBpbnN0YW5jZXMgYmFzZWQgb24gYWxyZWFkeSBleGlzdGVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgbWFpbkFqYXhlciA9IG5ldyBBamF4ZXIoe1xuICAgKiAgIGJhc2VVUkw6ICcvL290aGVyLmRvbWFpbi5jb20vYXBpJyxcbiAgICogICB3aXRoQ3JlZGVudGlhbHM6IHRydWVcbiAgICogfSk7XG4gICAqXG4gICAqIGNvbnN0IGxvbmdBamF4ZXIgPSBtYWluQWpheGVyLmluc3RhbmNlKHtcbiAgICogICB0aW1lb3V0OiAxMDAwMFxuICAgKiB9KTtcbiAgICovXG4gIGluc3RhbmNlKGNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgZGF0YUNvbmZpZyA9IGhhc093bihjb25maWcsICdkYXRhJylcbiAgICAgID8geyBkYXRhOiBjb25maWcuZGF0YSB9XG4gICAgICA6IHt9O1xuXG4gICAgZGVsZXRlIGNvbmZpZy5kYXRhO1xuXG4gICAgY29uc3QgY29uZiA9IGFzc2lnbihcbiAgICAgIGRlZXBBc3NpZ24oe30sIHRoaXMuJCQsIGNvbmZpZyksXG4gICAgICBkYXRhQ29uZmlnXG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQWpheGVyKGNvbmYpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgQWpheGVyI3BhdGNoXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt1cmxdIC0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEBwYXJhbSB7Kn0gW2RhdGFdIC0gQWRkaXRpb25hbCBwYXJhbWV0ZXIgZm9yIHVwbG9hZGluZyBkYXRhLlxuICAgKiBAcGFyYW0ge0FqYXhlckNvbmZpZ30gW2NvbmZpZ10gLSBTZWUge0BsaW5rIEFqYXhlciNyZXF1ZXN0fS5cbiAgICogQHJldHVybnMge1Byb21pc2UuPEFqYXhlclJlc3BvbnNlLCBFcnJvcj59IFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAZGVzY3JpcHRpb24gU2hvcnRoYW5kIGZvciAjcmVxdWVzdCBmb3IgaGVhZCByZXF1ZXN0cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYWpheGVyLnBhdGNoKCcvZGF0YScsIHsgdXNlcjogJ0pvaG4nIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAqIH0pO1xuICAgKi9cbiAgcGF0Y2godXJsLCBkYXRhID0ge30sIGNvbmZpZyA9IHt9KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgIWlzU3RyaW5nKHVybCkpIHtcbiAgICAgIGNvbmZpZyA9IGRhdGE7XG4gICAgICBkYXRhID0gdXJsO1xuICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCBhc3NpZ24oeyBtZXRob2Q6ICdwYXRjaCcsIGRhdGEgfSwgY29uZmlnKSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBBamF4ZXIjcG9zdFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbdXJsXSAtIFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSAtIEFkZGl0aW9uYWwgcGFyYW1ldGVyIGZvciB1cGxvYWRpbmcgZGF0YS5cbiAgICogQHBhcmFtIHtBamF4ZXJDb25maWd9IFtjb25maWddIC0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxBamF4ZXJSZXNwb25zZSwgRXJyb3I+fSBTZWUge0BsaW5rIEFqYXhlciNyZXF1ZXN0fS5cbiAgICogQGRlc2NyaXB0aW9uIFNob3J0aGFuZCBmb3IgI3JlcXVlc3QgZm9yIGhlYWQgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGFqYXhlci5wb3N0KCcvZGF0YScsIHsgdXNlcjogJ0pvaG4nIH0pLnRoZW4oKHJlcykgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAqIH0pO1xuICAgKi9cbiAgcG9zdCh1cmwsIGRhdGEgPSB7fSwgY29uZmlnID0ge30pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAmJiAhaXNTdHJpbmcodXJsKSkge1xuICAgICAgY29uZmlnID0gZGF0YTtcbiAgICAgIGRhdGEgPSB1cmw7XG4gICAgICB1cmwgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1cmwsIGFzc2lnbih7IG1ldGhvZDogJ3Bvc3QnLCBkYXRhIH0sIGNvbmZpZykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgQWpheGVyI3B1dFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbdXJsXSAtIFNlZSB7QGxpbmsgQWpheGVyI3JlcXVlc3R9LlxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSAtIEFkZGl0aW9uYWwgcGFyYW1ldGVyIGZvciB1cGxvYWRpbmcgZGF0YS5cbiAgICogQHBhcmFtIHtBamF4ZXJDb25maWd9IFtjb25maWddIC0gU2VlIHtAbGluayBBamF4ZXIjcmVxdWVzdH0uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxBamF4ZXJSZXNwb25zZSwgRXJyb3I+fSBTZWUge0BsaW5rIEFqYXhlciNyZXF1ZXN0fS5cbiAgICogQGRlc2NyaXB0aW9uIFNob3J0aGFuZCBmb3IgI3JlcXVlc3QgZm9yIGhlYWQgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGFqYXhlci5wdXQoJy9kYXRhJywgeyB1c2VyOiAnSm9obicgfSkudGhlbigocmVzKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2cocmVzKTtcbiAgICogfSk7XG4gICAqL1xuICBwdXQodXJsLCBkYXRhID0ge30sIGNvbmZpZyA9IHt9KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgIWlzU3RyaW5nKHVybCkpIHtcbiAgICAgIGNvbmZpZyA9IGRhdGE7XG4gICAgICBkYXRhID0gdXJsO1xuICAgICAgdXJsID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXJsLCBhc3NpZ24oeyBtZXRob2Q6ICdwdXQnLCBkYXRhIH0sIGNvbmZpZykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2QgQWpheGVyI3JlcXVlc3RcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gW3VybF0gLSBVUkwgZm9yIHRoZSByZXF1ZXN0LlxuICAgKiBAcGFyYW0ge0FqYXhlckNvbmZpZ30gW2NvbmZpZ10gLSBBZGRpdGlvbmFsIGNvbmZpZyBmb3IgdGhpcyBwYXJ0aWN1bGFyIHJlcXVlc3QuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlLjxBamF4ZXJSZXNwb25zZSwgRXJyb3I+fSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2l0aCB0aGUgcmVxdWVzdCByZXNwb25zZS5cbiAgICogQGRlc2NyaXB0aW9uIE1haW4gZnVuY3Rpb24gZm9yIG1ha2luZyByZXF1ZXN0cy4gQWxsIHJlcXVlc3QgbWV0aG9kcyBjYWxsIHRoaXMgbWV0aG9kXG4gICAqIGluY2x1ZGluZyB0aGUgZmV0Y2ggaW5zdGFuY2UgaXRzZWxmLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhamF4ZXIucmVxdWVzdCgnL2RhdGEnLCB7IHRpbWVvdXQ6IDEwMDAgfSkudGhlbigocmVzKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2cocmVzKTtcbiAgICogfSk7XG4gICAqXG4gICAqIGFqYXhlci5yZXF1ZXN0KHsgdGltZW91dDogMTAwMCB9KS50aGVuKChyZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xuICAgKiB9KTtcbiAgICpcbiAgICogYWpheGVyLnJlcXVlc3QoKS50aGVuKChyZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhyZXMpO1xuICAgKiB9KTtcbiAgICovXG4gIHJlcXVlc3QodXJsLCBjb25maWcgPSB7fSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmICFpc1N0cmluZyh1cmwpKSB7XG4gICAgICBjb25maWcgPSB1cmw7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YUNvbmZpZyA9IGhhc093bihjb25maWcsICdkYXRhJylcbiAgICAgID8geyBkYXRhOiBjb25maWcuZGF0YSB9XG4gICAgICA6IHt9O1xuICAgIGNvbnN0IHVybENvbmZpZyA9IGlzU3RyaW5nKHVybClcbiAgICAgID8geyB1cmwgfVxuICAgICAgOiB7fTtcblxuICAgIGRlbGV0ZSBjb25maWcuZGF0YTtcblxuICAgIGNvbnN0IGNvbmYgPSBhc3NpZ24oXG4gICAgICBkZWVwQXNzaWduKFxuICAgICAgICBkZWVwQ2xvbmUodGhpcy4kJCksXG4gICAgICAgIHVybENvbmZpZyxcbiAgICAgICAgY29uZmlnXG4gICAgICApLFxuICAgICAgZGF0YUNvbmZpZ1xuICAgICk7XG5cbiAgICBsZXQgeGhyO1xuICAgIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpdGVyYXRlKGNvbmYuYmVmb3JlLCAobWlkZGxld2FyZSkgPT4ge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShtaWRkbGV3YXJlKGNvbmYpKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUobWlkZGxld2FyZShlcnIsIGNvbmYpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBhZnRlcixcbiAgICAgICAgYXV0aDoge1xuICAgICAgICAgIHVzZXJuYW1lLFxuICAgICAgICAgIHBhc3N3b3JkXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgb25wcm9ncmVzcyxcbiAgICAgICAgcmVzcG9uc2VUeXBlLFxuICAgICAgICB0aW1lb3V0LFxuICAgICAgICB1cmwsXG4gICAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgICAgfSA9IGNvbmY7XG5cbiAgICAgIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSwgdXNlcm5hbWUsIHBhc3N3b3JkKTtcblxuICAgICAgaXRlcmF0ZShoZWFkZXJzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXIsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob25wcm9ncmVzcykge1xuICAgICAgICBpZiAodXBsb2FkTWV0aG9kcy5pbmRleE9mKG1ldGhvZCkgPT09IC0xKSB7XG4gICAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBvbnByb2dyZXNzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci51cGxvYWQub25wcm9ncmVzcyA9IG9ucHJvZ3Jlc3M7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeGhyLm9uYWJvcnQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdSZXF1ZXN0IHdhcyBhYm9ydGVkJyk7XG5cbiAgICAgICAgZXJyb3IudHlwZSA9ICdBQk9SVF9FUlJPUic7XG5cbiAgICAgICAgcmVqZWN0KGVycm9yKTtcblxuICAgICAgICB4aHIgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdOZXR3b3JrIGVycm9yJyk7XG5cbiAgICAgICAgZXJyb3IudHlwZSA9ICdORVRXT1JLX0VSUk9SJztcblxuICAgICAgICByZWplY3QoZXJyb3IpO1xuXG4gICAgICAgIHhociA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICB4aHIub250aW1lb3V0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignUmVxdWVzdCB0aW1lIGV4Y2VlZGVkJyk7XG5cbiAgICAgICAgZXJyb3IudHlwZSA9ICdUSU1FT1VUX0VSUk9SJztcblxuICAgICAgICByZWplY3QoZXJyb3IpO1xuXG4gICAgICAgIHhociA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoIXhociB8fCAheGhyLnN0YXR1cyB8fCB4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICAgIGNvbmZpZzogY29uZixcbiAgICAgICAgICBkYXRhOiAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8geGhyLnJlc3BvbnNlVGV4dCA6IHhoci5yZXNwb25zZSxcbiAgICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSxcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgICAgICB4aHJcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgIGl0ZXJhdGUoYWZ0ZXIsIChtaWRkbGV3YXJlKSA9PiB7XG4gICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAobWlkZGxld2FyZS5sZW5ndGggPj0gMikge1xuICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKG1pZGRsZXdhcmUocmVzcG9uc2UpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKG1pZGRsZXdhcmUoZXJyLCByZXNwb25zZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJlc29sdmUocHJvbWlzZVxuICAgICAgICAgIC50aGVuKCgpID0+IHJlc3BvbnNlKVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBlcnIucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XG4gICAgICB4aHIudGltZW91dCA9ICt0aW1lb3V0IHx8IDA7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gISF3aXRoQ3JlZGVudGlhbHM7XG5cbiAgICAgIHhoci5zZW5kKGRhdGEpO1xuICAgIH0pKTtcblxuICAgIHByb21pc2UuYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIGlmICh4aHIpIHtcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmZXRjaEJlZm9yZU1pZGRsZXdhcmUoY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBiYXNlVVJMLFxuICAgIGRhdGEsXG4gICAgaGVhZGVycyxcbiAgICBtZXRob2QsXG4gICAgcGFyYW1zLFxuICAgIHF1ZXJ5LFxuICAgIHVybFxuICB9ID0gY29uZmlnO1xuICBjb25zdCBNRVRIT0QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcblxuICBjb25maWcubWV0aG9kID0gTUVUSE9EO1xuICBjb25maWcudXJsID0gY29uc3RydWN0VVJMKGJhc2VVUkwsIHVybCwgcGFyYW1zLCBxdWVyeSk7XG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShkYXRhLCBNRVRIT0QsIGhlYWRlcnMpO1xufVxuXG4vKipcbiAqIEBjb25zdCB7QWpheGVyfSBmZXRjaFxuICogQHR5cGUge0FqYXhlcn1cbiAqIEBwdWJsaWNcbiAqIEBkZXNjcmlwdGlvbiBFbXB0eSBpbnN0YW5jZSBvZiBBamF4ZXIuXG4gKi9cbmNvbnN0IGZldGNoID0gbmV3IEFqYXhlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBBamF4ZXI7XG5leHBvcnQgeyBBamF4ZXIsIFByb21pc2UsIGZldGNoIH07XG4iLCJpbXBvcnQgQWpheGVyIGZyb20gJy4vbGliL0FqYXhlcic7XG5cbndpbmRvdy5BamF4ZXIgPSBBamF4ZXI7XG4iXSwibmFtZXMiOlsid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImhhc093blByb3BlcnR5IiwidG9TdHJpbmciLCJ3aGl0ZVNwYWNlIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImNhbGwiLCJzbGljZSIsImlzQXJyYXkiLCJBcnJheSIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsImlzUHJpbWl0aXZlIiwidGVzdCIsImlzU3RyaW5nIiwiYXNzaWduIiwidGFyZ2V0Iiwib2JqZWN0cyIsInNvdXJjZSIsImtleSIsIml0ZXJhdGUiLCJvYmplY3QiLCJjYWxsYmFjayIsImFycmF5IiwiaXRlcmF0ZWQiLCJsZW5ndGgiLCJtYXAiLCJuZXdPYmplY3QiLCJ0cmltIiwic3RyaW5nIiwicmVwbGFjZSIsInJlcGxhY2VTdHJpbmciLCJzdHJpbmdUb1JlcGxhY2UiLCJyZXBsYWNlbWVudCIsInNwbGl0Iiwiam9pbiIsImRlZXBDbG9uZSIsImNsb25lIiwiZGVlcEFzc2lnbiIsImhhc093biIsInByb3BlcnR5Iiwic2VjcmV0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJNYXRoIiwicmFuZG9tIiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwiaGlkZGVuU3RhdHVzIiwiaGlkZGVuVmFsdWUiLCJvbkZ1bGZpbGwiLCJvblJlamVjdCIsInJlYWxQcm9taXNlIiwiaGlkZGVuUHJvbWlzZSIsInN0YXR1cyIsInZhbCIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnRpZXMiLCIkJCIsImhhbmRsZWQiLCJmIiwicmVzb2x2ZSIsInJlamVjdCIsInByb3h5IiwiZXJyIiwicHVzaCIsImkiLCJvblVuaGFuZGxlZFJlamVjdGlvbiIsIm9uRXJyb3IiLCJ0aGVuIiwib25SZWplY3RlZCIsIm9uRnVsZmlsbGVkT3JSZWplY3RlZCIsImlzRnVuYyIsIm9uRnVsZmlsbGVkIiwicHJvbWlzZSIsImhhbmRsZSIsIm1ldGhvZCIsImhhbmRsZXIiLCJpdGVyYWJsZSIsInRvUmVzb2x2ZSIsIm5leHQiLCJkb25lIiwiY29uc29sZSIsImVycm9yIiwiYmluZCIsImFic29sdXRlVVJMUmVnZXhwIiwiZW1wdHlBcnJheSIsImJhc2VVUkwiLCJ1cmwiLCJwYXJhbXMiLCJxdWVyeSIsIlVSTCIsImlzQWJzb2x1dGUiLCJTdHJpbmciLCJwYXJhbSIsImVuY29kZSIsInF1ZXJ5UGFyYW1zIiwicXVlcnlTd2l0Y2hlciIsInByZWZpeCIsImluZGV4T2YiLCJwb3N0Zml4IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmF3SGVhZGVycyIsImhlYWRlcnMiLCJpbmRleCIsInN1YnN0cmluZyIsIm5vdFRvVHJhbnNmb3JtIiwid2l0aG91dEJvZHkiLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRzIiwibG9jYXRpb24iLCJvcmlnaW4iLCJ1cGxvYWRNZXRob2RzIiwiQWpheGVyIiwiY29uZmlnIiwiYWpheGVyIiwicmVxdWVzdCIsImFwcGx5IiwiYXJndW1lbnRzIiwiY29uZiIsImJlZm9yZSIsImZldGNoQmVmb3JlTWlkZGxld2FyZSIsImRlZmluZVByb3BlcnR5Iiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJtaWRkbGV3YXJlIiwiYWZ0ZXJBbGwiLCJhZnRlciIsInVuc2hpZnQiLCJiZWZvcmVBbGwiLCJoZWFkZXIiLCJkYXRhQ29uZmlnIiwidXJsQ29uZmlnIiwieGhyIiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJvbnByb2dyZXNzIiwicmVzcG9uc2VUeXBlIiwidGltZW91dCIsIndpdGhDcmVkZW50aWFscyIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJ1cGxvYWQiLCJvbmFib3J0IiwiRXJyb3IiLCJ0eXBlIiwib25lcnJvciIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInBhcnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInN0YXR1c1RleHQiLCJjYXRjaCIsImUiLCJzZW5kIiwiYWJvcnQiLCJGdW5jdGlvbiIsIk1FVEhPRCIsInRvVXBwZXJDYXNlIiwiY29uc3RydWN0VVJMIiwidHJhbnNmb3JtRGF0YSIsImZldGNoIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7QUFF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"}