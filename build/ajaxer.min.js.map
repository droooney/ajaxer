{"version":3,"file":"ajaxer.min.js","sources":["../lib/utils.js","../lib/constructURL.js","../lib/parseHeaders.js","../lib/transformData.js","../lib/Ajaxer.js","../browser.js"],"sourcesContent":["const {\n  hasOwnProperty,\n  toString\n} = {};\nconst whiteSpace = /^\\s*|\\s*$/g;\nconst primitive = /^(number|string|boolean|symbol|undefined)$/;\n\nexport function toStringTag(value) {\n  return toString\n    .call(value)\n    .slice(8, -1);\n}\n\nexport const isArray = Array.isArray || ((value) => (\n  toStringTag(value) === 'Array'\n));\n\nexport function isFunction(value) {\n  return typeof value === 'function' || toStringTag(value) === 'Function';\n}\n\nexport function isObject(value) {\n  return typeof value && (typeof value === 'object' || isFunction(value));\n}\n\nexport function isPrimitive(value) {\n  return value === null || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\nexport function assign(target, ...objects) {\n  iterate(objects, (source) => {\n    iterate(source, (value, key) => {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function iterate(object, callback) {\n  const array = isArray(object);\n\n  let iterated = 0;\n  const { length } = object || {};\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= length) {\n        break;\n      }\n\n      callback(object[key], array ? +key : key, object);\n    }\n  }\n}\n\nexport function map(object, callback) {\n  const newObject = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n\nexport function trim(string) {\n  return string.replace(whiteSpace, '');\n}\n\nexport function replaceString(string, stringToReplace, replacement) {\n  return string\n    .split(stringToReplace)\n    .join(replacement);\n}\n\nexport function deepClone(object) {\n  if (isPrimitive(object) || isFunction(object)) {\n    return object;\n  }\n\n  const clone = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    clone[key] = deepClone(value);\n  });\n\n  return clone;\n}\n\nexport function deepAssign(target, ...objects) {\n  iterate(objects, (object) => {\n    iterate(object, (object, key) => {\n      if (isPrimitive(object) || !hasOwnProperty.call(target, key)) {\n        target[key] = deepClone(object);\n\n        return;\n      }\n\n      if (!isPrimitive(target[key])) {\n        deepAssign(target[key], object);\n      }\n    });\n  });\n\n  return target;\n}\n\nexport function hasOwn(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n","import {\n  isArray,\n  isObject,\n  iterate,\n  map,\n  replaceString\n} from './utils';\n\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst emptyArray = [];\n\nexport default (baseURL, url, params, query) => {\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = replaceString(URL, `:${ param }`, encode(value));\n  });\n\n  const queryParams = querySwitcher(query, '');\n\n  if (queryParams.length) {\n    const prefix = URL.indexOf('?') === -1 ? '?' : '&';\n    const postfix = map(queryParams, ({ param, value }) => (\n      `${ encode(param) }=${ encode(value) }`\n    )).join('&');\n\n    URL += prefix + postfix;\n  }\n\n  return URL;\n};\n\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\nfunction encode(string) {\n  return encodeURIComponent(string);\n}\n\nfunction querySwitcher(query, prefix) {\n  /* eslint indent: 0 */\n  switch (true) {\n    case isArray(query): {\n      const queryParams = [];\n\n      iterate(query, (value) => {\n        if (isObject(value)) {\n          return queryParams.push(...querySwitcher(value, `${ prefix }[]`));\n        }\n\n        queryParams.push({\n          param: `${ prefix }[]`,\n          value\n        });\n      });\n\n      return queryParams;\n    }\n\n    case isObject(query): {\n      const queryParams = [];\n\n      iterate(query, (value, param) => {\n        if (isObject(value)) {\n          queryParams.push(...querySwitcher(value, prefix ? `${ prefix }[${ param }]` : param));\n\n          return;\n        }\n\n        queryParams.push({\n          param: prefix ? `${ prefix }[${ param }]` : param,\n          value: String(value)\n        });\n      });\n\n      return queryParams;\n    }\n\n    default: {\n      return emptyArray;\n    }\n  }\n}\n","import {\n  iterate,\n  trim\n} from './utils';\n\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = trim(value.substring(0, index));\n    const val = trim(value.substring(index + 1));\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","import {\n  isObject,\n  toStringTag\n} from './utils';\n\nconst notToTransform = ['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number'];\nconst withoutBody = ['DELETE', 'GET', 'HEAD'];\n\nexport default (data, method, headers) => {\n  if (withoutBody.indexOf(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOf(toStringTag(data)) === -1) {\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json;charset=utf-8';\n    }\n\n    return JSON.stringify(data);\n  }\n\n  return data;\n};\n","import {\n  isFunction,\n  isString,\n  assign,\n  iterate,\n  deepAssign,\n  deepClone,\n  hasOwn\n} from './utils';\n\nimport constructURL from './constructURL';\nimport parseHeaders from './parseHeaders';\nimport transformData from './transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} AjaxerMethod\n * @public\n */\n\n/**\n * @typedef {Object} AjaxerConfig\n * @public\n * @property {Array.<AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String>} [headers]\n * @property {AjaxerMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} AjaxerResponse\n * @public\n * @property {AjaxerConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback AjaxerAfterMiddleware\n * @public\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerBeforeMiddleware\n * @public\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerConfigFunction\n * @public\n * @param {AjaxerConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: window.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = ['POST', 'PUT'];\nlet Promise;\n\n/**\n * @class Ajaxer\n * @extends Function\n * @public\n * @param {AjaxerConfig} [config = {}] - Config to add.\n * @returns {Ajaxer} Instance of Ajaxer.\n * An instance of Ajaxer is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const ajaxer = new Ajaxer();\n *\n * ajaxer('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Ajaxer extends Function {\n  /**\n   * @method Ajaxer.usePromise\n   * @public\n   * @param {Promise} PromiseClass - Promise class to use.\n   */\n  static usePromise(PromiseClass) {\n    Promise = PromiseClass;\n  }\n\n  constructor(config = {}) {\n    super();\n\n    function ajaxer() {\n      return ajaxer.request.apply(ajaxer, arguments);\n    }\n\n    const conf = deepAssign({}, defaults, config);\n\n    /**\n     * @member {AjaxerConfig} Ajaxer#$$\n     * @type {AjaxerConfig}\n     * @public\n     * @description Ajaxer config.\n     */\n    Object.defineProperty(ajaxer, '$$', { value: conf });\n    Object.setPrototypeOf(ajaxer, Ajaxer.prototype);\n\n    return ajaxer;\n  }\n\n  /**\n   * @method Ajaxer#after\n   * @public\n   * @param {AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = JSON.parse(res.data):\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#before\n   * @public\n   * @param {AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#config\n   * @public\n   * @param {String|AjaxerConfig|AjaxerConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Ajaxer|AjaxerConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const ajaxer = new Ajaxer();\n   *\n   * ajaxer.config({ timeout: 5000 });\n   * ajaxer.config().timeout; // 5000\n   *\n   * ajaxer.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const config = this.$$;\n\n    if (!arguments.length) {\n      return config;\n    }\n\n    if (isFunction(property)) {\n      property(config);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      deepAssign(config, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#delete\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * ajaxer.delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Ajaxer#get\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * ajaxer.get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Ajaxer#head\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Ajaxer#headers\n   * @public\n   * @param {String|Object.<String, String>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String} [value] - Header value. If the first argument is a string\n   * this has to be a header value.\n   * @returns {Ajaxer} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * ajaxer\n   *   .headers('My-Header', 'Value')\n   *   .headers({\n   *     'My-Another-Header': 'Value2'\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      headers[header] = value;\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#instance\n   * @public\n   * @param {AjaxerConfig} [config] - New config if needed.\n   * @returns {Ajaxer} New instance of Ajaxer.\n   * @description Method for creating new ajaxer instances based on already existent.\n   *\n   * @example\n   * const mainAjaxer = new Ajaxer({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longAjaxer = mainAjaxer.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign({}, this.$$, config),\n      dataConfig\n    );\n\n    return new Ajaxer(conf);\n  }\n\n  /**\n   * @method Ajaxer#patch\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#post\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#put\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {AjaxerConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<AjaxerResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * ajaxer.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign(\n        deepClone(this.$$),\n        urlConfig,\n        config\n      ),\n      dataConfig\n    );\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        baseURL,\n        data,\n        headers,\n        method,\n        onprogress,\n        params,\n        query,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n      const eventualMethod = method.toUpperCase();\n      const eventualURL = constructURL(baseURL, url, params, query);\n      const eventualData = transformData(data, eventualMethod, headers);\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(eventualMethod, eventualURL, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOf(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = +timeout || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(eventualData);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\n/**\n * @const {Ajaxer} ajaxer\n * @type {Ajaxer}\n * @public\n * @description Empty instance of Ajaxer.\n */\nconst ajaxer = new Ajaxer();\n\nexport default Ajaxer;\nexport { Ajaxer, ajaxer };\n","import Ajaxer, { ajaxer } from './lib/Ajaxer';\n\nwindow.Ajaxer = Ajaxer;\nwindow.ajaxer = ajaxer;\n"],"names":["toStringTag","value","toString","call","slice","isFunction","isObject","isPrimitive","test","isString","assign","target","objects","source","key","iterate","object","callback","array","isArray","iterated","length","hasOwnProperty","map","newObject","trim","string","replace","whiteSpace","replaceString","stringToReplace","replacement","split","join","deepClone","clone","deepAssign","hasOwn","property","isAbsolute","url","absoluteURLRegexp","encode","encodeURIComponent","querySwitcher","query","prefix","queryParams","push","param","String","emptyArray","Array","baseURL","params","URL","indexOf","postfix","rawHeaders","headers","index","substring","val","notToTransform","withoutBody","data","method","JSON","stringify","defaults","window","location","origin","uploadMethods","Promise","Ajaxer","ajaxer","request","apply","arguments","config","conf","defineProperty","setPrototypeOf","prototype","PromiseClass","middleware","afterAll","after","this","$$","unshift","beforeAll","before","undefined","header","dataConfig","urlConfig","xhr","promise","resolve","then","err","reject","auth","username","password","onprogress","responseType","timeout","withCredentials","eventualMethod","toUpperCase","eventualURL","constructURL","eventualData","transformData","XMLHttpRequest","open","setRequestHeader","upload","onabort","error","Error","type","onerror","ontimeout","onreadystatechange","status","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","e","send","abort","Function"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}