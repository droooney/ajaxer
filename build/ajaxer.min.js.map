{"version":3,"file":"ajaxer.min.js","sources":["../lib/utils.js","../lib/constructURL.js","../lib/Ajaxer.js","../lib/global.js","../lib/Promise.js","../lib/parseHeaders.js","../lib/transformData.js","../browser.js"],"sourcesContent":["const {\n  hasOwnProperty,\n  toString\n} = {};\nconst whiteSpace = /^\\s*|\\s*$/g;\nconst primitive = /^(number|string|boolean|symbol|undefined)$/;\n\nexport function toStringTag(value) {\n  return toString\n    .call(value)\n    .slice(8, -1);\n}\n\nexport const isArray = Array.isArray || ((value) => (\n  toStringTag(value) === 'Array'\n));\n\nexport function isFunction(value) {\n  return typeof value === 'function' || toStringTag(value) === 'Function';\n}\n\nexport function isObject(value) {\n  return typeof value && (typeof value === 'object' || isFunction(value));\n}\n\nexport function isPrimitive(value) {\n  return value === null || /^(number|string|boolean|symbol|undefined)$/.test(typeof value);\n}\n\nexport function isString(value) {\n  return toStringTag(value) === 'String';\n}\n\nexport function assign(target, ...objects) {\n  iterate(objects, (source) => {\n    iterate(source, (value, key) => {\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function iterate(object, callback) {\n  const array = isArray(object);\n\n  let iterated = 0;\n  const { length } = object || {};\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      if (array && iterated++ >= length) {\n        break;\n      }\n\n      callback(object[key], array ? +key : key, object);\n    }\n  }\n}\n\nexport function map(object, callback) {\n  const newObject = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    newObject[key] = callback(value, key, object);\n  });\n\n  return newObject;\n}\n\nexport function trim(string) {\n  return string.replace(whiteSpace, '');\n}\n\nexport function replaceString(string, stringToReplace, replacement) {\n  return string\n    .split(stringToReplace)\n    .join(replacement);\n}\n\nexport function deepClone(object) {\n  if (isPrimitive(object) || isFunction(object)) {\n    return object;\n  }\n\n  const clone = isArray(object)\n    ? []\n    : {};\n\n  iterate(object, (value, key) => {\n    clone[key] = deepClone(value);\n  });\n\n  return clone;\n}\n\nexport function deepAssign(target, ...objects) {\n  iterate(objects, (object) => {\n    iterate(object, (object, key) => {\n      if (isPrimitive(object) || !hasOwnProperty.call(target, key)) {\n        target[key] = deepClone(object);\n\n        return;\n      }\n\n      if (!isPrimitive(target[key])) {\n        deepAssign(target[key], object);\n      }\n    });\n  });\n\n  return target;\n}\n\nexport function hasOwn(object, property) {\n  return hasOwnProperty.call(object, property);\n}\n","import {\n  isArray,\n  isObject,\n  iterate,\n  map,\n  replaceString\n} from './utils';\n\nconst absoluteURLRegexp = /^(([a-z][a-z\\d+\\-.]*:)?\\/\\/|data:[a-z]+\\/[a-z]+;base64,)/i;\nconst emptyArray = [];\n\nexport default (baseURL, url, params, query) => {\n  let URL = isAbsolute(url)\n    ? url\n    : `${ String(baseURL).replace(/\\/+$/, '') }/${ String(url).replace(/^\\/+/, '') }`;\n\n  iterate(params, (value, param) => {\n    URL = replaceString(URL, `:${ param }`, encode(value));\n  });\n\n  const queryParams = querySwitcher(query, '');\n\n  if (queryParams.length) {\n    const prefix = URL.indexOf('?') === -1 ? '?' : '&';\n    const postfix = map(queryParams, ({ param, value }) => (\n      `${ encode(param) }=${ encode(value) }`\n    )).join('&');\n\n    URL += prefix + postfix;\n  }\n\n  return URL;\n};\n\nfunction isAbsolute(url) {\n  return absoluteURLRegexp.test(url);\n}\n\nfunction encode(string) {\n  return encodeURIComponent(string);\n}\n\nfunction querySwitcher(query, prefix) {\n  /* eslint indent: 0 */\n  switch (true) {\n    case isArray(query): {\n      const queryParams = [];\n\n      iterate(query, (value) => {\n        if (isObject(value)) {\n          return queryParams.push(...querySwitcher(value, `${ prefix }[]`));\n        }\n\n        queryParams.push({\n          param: `${ prefix }[]`,\n          value\n        });\n      });\n\n      return queryParams;\n    }\n\n    case isObject(query): {\n      const queryParams = [];\n\n      iterate(query, (value, param) => {\n        if (isObject(value)) {\n          queryParams.push(...querySwitcher(value, prefix ? `${ prefix }[${ param }]` : param));\n\n          return;\n        }\n\n        queryParams.push({\n          param: prefix ? `${ prefix }[${ param }]` : param,\n          value: String(value)\n        });\n      });\n\n      return queryParams;\n    }\n\n    default: {\n      return emptyArray;\n    }\n  }\n}\n","import {\n  isFunction,\n  isString,\n  assign,\n  iterate,\n  deepAssign,\n  deepClone,\n  hasOwn\n} from './utils';\n\nimport Promise from './Promise';\n\nimport constructURL from './constructURL';\nimport parseHeaders from './parseHeaders';\nimport transformData from './transformData';\n\n/**\n * @typedef {'get'|'post'|'delete'|'head'|'put'|'patch'} AjaxerMethod\n * @public\n */\n\n/**\n * @typedef {Object} AjaxerConfig\n * @public\n * @property {Array.<AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware>} [after]\n * @property {Object} [auth]\n * @property {String} [auth.username]\n * @property {String} [auth.password]\n * @property {String} [baseURL]\n * @property {Array.<AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware>} [before]\n * @property {*} [data]\n * @property {Object.<String, String>} [headers]\n * @property {AjaxerMethod} [method]\n * @property {Object} [params]\n * @property {Object} [query]\n * @property {String} [responseType]\n * @property {Number} [timeout]\n * @property {String} [url]\n * @property {Boolean} [withCredentials]\n */\n\n/**\n * @typedef {Object} AjaxerResponse\n * @public\n * @property {AjaxerConfig} config\n * @property {*} data\n * @property {Object.<String, String>} headers\n * @property {Number} status\n * @property {String} statusText\n * @property {XMLHttpRequest} xhr\n */\n\n/**\n * @callback AjaxerAfterMiddleware\n * @public\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerErrorAfterMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerResponse} config - Ajaxer response.\n */\n\n/**\n * @callback AjaxerBeforeMiddleware\n * @public\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerErrorBeforeMiddleware\n * @public\n * @param {Error|*} err - Thrown error.\n * @param {AjaxerConfig} config - Ajaxer config.\n */\n\n/**\n * @callback AjaxerConfigFunction\n * @public\n * @param {AjaxerConfig} config\n */\n\nconst defaults = {\n  after: [],\n  auth: {\n    username: '',\n    password: ''\n  },\n  baseURL: global.location.origin,\n  before: [],\n  data: null,\n  headers: {},\n  method: 'get',\n  params: {},\n  query: {},\n  responseType: '',\n  timeout: 0,\n  url: '',\n  withCredentials: false\n};\nconst uploadMethods = ['POST', 'PUT'];\n\n/**\n * @class Ajaxer\n * @extends Function\n * @public\n * @param {AjaxerConfig} [config = {}] - Config to add.\n * @returns {Ajaxer} Instance of Ajaxer.\n * An instance of Ajaxer is a function that simply calls #request with the same arguments.\n * @description Class for fetching data.\n *\n * @example\n * const ajaxer = new Ajaxer();\n *\n * ajaxer('/data').then((res) => {\n *   console.log(res);\n * });\n */\nclass Ajaxer extends Function {\n  constructor(config = {}) {\n    super();\n\n    function ajaxer() {\n      return ajaxer.request.apply(ajaxer, arguments);\n    }\n\n    const conf = deepAssign({}, defaults, config);\n\n    if (conf.before.indexOf(fetchBeforeMiddleware) === -1) {\n      conf.before.push(fetchBeforeMiddleware);\n    }\n\n    /**\n     * @member {AjaxerConfig} Ajaxer#$$\n     * @type {AjaxerConfig}\n     * @public\n     * @description Ajaxer config.\n     */\n    Object.defineProperty(ajaxer, '$$', { value: conf });\n    Object.setPrototypeOf(ajaxer, Ajaxer.prototype);\n\n    return ajaxer;\n  }\n\n  /**\n   * @method Ajaxer#after\n   * @public\n   * @param {AjaxerAfterMiddleware|AjaxerErrorAfterMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [afterAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the end\" and falsey for \"to the beginning\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called after the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .after((err, res) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .after((res) => {\n   *     res.json = JSON.parse(res.data):\n   *   });\n   */\n  after(middleware, afterAll = true) {\n    const { after } = this.$$;\n\n    if (afterAll) {\n      after.push(middleware);\n    } else {\n      after.unshift(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#before\n   * @public\n   * @param {AjaxerBeforeMiddleware|AjaxerErrorBeforeMiddleware} middleware - Middleware to add.\n   * @param {Boolean|*} [beforeAll = true] - Boolean parameter where to put the middleware.\n   * Truthy parameter stands for \"to the beginning\" and falsey for \"to the end\".\n   * @returns {Ajaxer} Returns this.\n   * @description Middleware that is called before the request.\n   * If the middleware has 2 or less arguments it's treated as success middleware otherwise as an error one.\n   * If the middleware returns a promise it becomes a part of the middleware chain.\n   *\n   * @example\n   * const ajaxer = new Ajaxer()\n   *   .before((err, req) => {\n   *     console.log(err);\n   *\n   *     throw err;\n   *   })\n   *   .before((req) => {\n   *     if (req.url === '/veryLongRequest') {\n   *       req.timeout = 30000;\n   *     }\n   *   });\n   */\n  before(middleware, beforeAll = true) {\n    const { before } = this.$$;\n\n    if (beforeAll) {\n      before.unshift(middleware);\n    } else {\n      before.push(middleware);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#config\n   * @public\n   * @param {String|AjaxerConfig|AjaxerConfigFunction} [property] - If it's a function\n   * it's called with the fetch config argument, if it's a string the value argument\n   * is used for assigning this property to the fetch config\n   * otherwise it's assigned to the fetch config.\n   * @param {*} [value] - See the property argument.\n   * @returns {Ajaxer|AjaxerConfig} If the argument is present this is returned otherwise the fetch config is returned.\n   * @description Method for getting and setting config.\n   *\n   * @example\n   * const ajaxer = new Ajaxer();\n   *\n   * ajaxer.config({ baseURL: 5000 });\n   * ajaxer.config().timeout; // 5000\n   *\n   * ajaxer.config((config) => {\n   *   config.baseURL += '/api';\n   * });\n   */\n  config(property, value) {\n    const config = this.$$;\n\n    if (!arguments.length) {\n      return config;\n    }\n\n    if (isFunction(property)) {\n      property(config);\n    } else {\n      if (arguments.length >= 2) {\n        property = { [property]: value };\n      }\n\n      deepAssign(config, property);\n    }\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#delete\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for delete requests.\n   *\n   * @example\n   * ajaxer.delete('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  delete(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'delete' }, config));\n  }\n\n  /**\n   * @method Ajaxer#get\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for get requests.\n   *\n   * @example\n   * ajaxer.get('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  get(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'get' }, config));\n  }\n\n  /**\n   * @method Ajaxer#head\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.head('/data').then((res) => {\n   *   console.log(res);\n   * });\n   */\n  head(url, config = {}) {\n    if (!isString(url)) {\n      config = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'head' }, config));\n  }\n\n  /**\n   * @method Ajaxer#headers\n   * @public\n   * @param {String|Object.<String, String>} header - A header string or an object of the following format:\n   * { [header]: [value1, value2, ...] }.\n   * @param {String} [value] - Header value. If the first argument is a string\n   * this has to be a header value.\n   * @returns {Ajaxer} Returns this.\n   * @description Method for setting request headers.\n   *\n   * @example\n   * ajaxer\n   *   .headers('My-Header', 'Value')\n   *   .headers({\n   *     'My-Another-Header': 'Value2'\n   *   });\n   */\n  headers(header, value) {\n    const { headers } = this.$$;\n\n    if (arguments.length >= 2) {\n      header = { [header]: value };\n    }\n\n    iterate(header, (value, header) => {\n      headers[header] = value;\n    });\n\n    return this;\n  }\n\n  /**\n   * @method Ajaxer#instance\n   * @public\n   * @param {AjaxerConfig} [config] - New config if needed.\n   * @returns {Ajaxer} New instance of Ajaxer.\n   * @description Method for creating new ajaxer instances based on already existent.\n   *\n   * @example\n   * const mainAjaxer = new Ajaxer({\n   *   baseURL: '//other.domain.com/api',\n   *   withCredentials: true\n   * });\n   *\n   * const longAjaxer = mainAjaxer.instance({\n   *   timeout: 10000\n   * });\n   */\n  instance(config = {}) {\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign({}, this.$$, config),\n      dataConfig\n    );\n\n    return new Ajaxer(conf);\n  }\n\n  /**\n   * @method Ajaxer#patch\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.patch('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  patch(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'patch', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#post\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.post('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  post(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'post', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#put\n   * @public\n   * @param {String} [url] - See {@link Ajaxer#request}.\n   * @param {*} [data] - Additional parameter for uploading data.\n   * @param {AjaxerConfig} [config] - See {@link Ajaxer#request}.\n   * @returns {Promise.<AjaxerResponse, Error>} See {@link Ajaxer#request}.\n   * @description Shorthand for #request for head requests.\n   *\n   * @example\n   * ajaxer.put('/data', { user: 'John' }).then((res) => {\n   *   console.log(res);\n   * });\n   */\n  put(url, data = {}, config = {}) {\n    if (arguments.length && !isString(url)) {\n      config = data;\n      data = url;\n      url = undefined;\n    }\n\n    return this.request(url, assign({ method: 'put', data }, config));\n  }\n\n  /**\n   * @method Ajaxer#request\n   * @public\n   * @param {String} [url] - URL for the request.\n   * @param {AjaxerConfig} [config] - Additional config for this particular request.\n   * @returns {Promise.<AjaxerResponse, Error>} Promise that is resolved with the request response.\n   * @description Main function for making requests. All request methods call this method\n   * including the fetch instance itself.\n   *\n   * @example\n   * ajaxer.request('/data', { timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request({ timeout: 1000 }).then((res) => {\n   *   console.log(res);\n   * });\n   *\n   * ajaxer.request().then((res) => {\n   *   console.log(res);\n   * });\n   */\n  request(url, config = {}) {\n    if (arguments.length === 1 && !isString(url)) {\n      config = url;\n    }\n\n    const dataConfig = hasOwn(config, 'data')\n      ? { data: config.data }\n      : {};\n    const urlConfig = isString(url)\n      ? { url }\n      : {};\n\n    delete config.data;\n\n    const conf = assign(\n      deepAssign(\n        deepClone(this.$$),\n        urlConfig,\n        config\n      ),\n      dataConfig\n    );\n\n    let xhr;\n    let promise = Promise.resolve();\n\n    iterate(conf.before, (middleware) => {\n      promise = promise.then(() => {\n        if (middleware.length >= 2) {\n          return Promise.resolve();\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(conf));\n        });\n      }, (err) => {\n        if (middleware.length < 2) {\n          return Promise.reject(err);\n        }\n\n        return new Promise((resolve) => {\n          resolve(middleware(err, conf));\n        });\n      });\n    });\n\n    promise = promise.then(() => new Promise((resolve, reject) => {\n      const {\n        after,\n        auth: {\n          username,\n          password\n        },\n        data,\n        headers,\n        method,\n        onprogress,\n        responseType,\n        timeout,\n        url,\n        withCredentials\n      } = conf;\n\n      xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, true, username, password);\n\n      iterate(headers, (value, header) => {\n        xhr.setRequestHeader(header, value);\n      });\n\n      if (onprogress) {\n        if (uploadMethods.indexOf(method) === -1) {\n          xhr.onprogress = onprogress;\n        } else {\n          xhr.upload.onprogress = onprogress;\n        }\n      }\n\n      xhr.onabort = () => {\n        const error = new Error('Request was aborted');\n\n        error.type = 'ABORT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onerror = () => {\n        const error = new Error('Network error');\n\n        error.type = 'NETWORK_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.ontimeout = () => {\n        const error = new Error('Request time exceeded');\n\n        error.type = 'TIMEOUT_ERROR';\n\n        reject(error);\n\n        xhr = null;\n      };\n\n      xhr.onreadystatechange = () => {\n        if (!xhr || !xhr.status || xhr.readyState !== 4) {\n          return;\n        }\n\n        const response = {\n          config: conf,\n          data: !responseType || responseType === 'text' ? xhr.responseText : xhr.response,\n          headers: parseHeaders(xhr.getAllResponseHeaders()),\n          status: xhr.status === 1223 ? 204 : xhr.status,\n          statusText: xhr.status === 1223 ? 'No Content' : xhr.statusText,\n          xhr\n        };\n\n        let promise = Promise.resolve();\n\n        iterate(after, (middleware) => {\n          promise = promise.then(() => {\n            if (middleware.length >= 2) {\n              return Promise.resolve();\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(response));\n            });\n          }, (err) => {\n            if (middleware.length < 2) {\n              return Promise.reject(err);\n            }\n\n            return new Promise((resolve) => {\n              resolve(middleware(err, response));\n            });\n          });\n        });\n\n        resolve(promise\n          .then(() => response)\n          .catch((err) => {\n            try {\n              err.response = response;\n            } catch (e) {\n              throw err;\n            }\n\n            throw err;\n          })\n        );\n      };\n\n      xhr.responseType = responseType;\n      xhr.timeout = +timeout || 0;\n      xhr.withCredentials = !!withCredentials;\n\n      xhr.send(data);\n    }));\n\n    promise.abort = function abort() {\n      if (xhr) {\n        xhr.abort();\n      }\n\n      return this;\n    };\n\n    return promise;\n  }\n}\n\nfunction fetchBeforeMiddleware(config) {\n  const {\n    baseURL,\n    data,\n    headers,\n    method,\n    params,\n    query,\n    url\n  } = config;\n  const METHOD = method.toUpperCase();\n\n  config.method = METHOD;\n  config.url = constructURL(baseURL, url, params, query);\n  config.data = transformData(data, METHOD, headers);\n}\n\n/**\n * @const {Ajaxer} fetch\n * @type {Ajaxer}\n * @public\n * @description Empty instance of Ajaxer.\n */\nconst fetch = new Ajaxer();\n\nexport default Ajaxer;\nexport { Ajaxer, Promise, fetch };\n","/* eslint no-nested-ternary: 0 */\n/* eslint no-negated-condition: 0 */\nexport default typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n","import { isFunction } from './utils';\n\n/**\n * @callback onFulfilledOrRejected\n * @public\n * @param {*} value - Promise value.\n * @param {Boolean} success - If the previous promise is fulfilled it's true and false if rejected.\n */\n\n/**\n * @callback onRejected\n * @public\n * @param {Error|*} err - Promise error.\n */\n\n/**\n * @callback onFulfilled\n * @public\n * @param {*} value - Promise value.\n */\n\nconst secret = {};\nconst iterator = global.Symbol\n  ? Symbol.iterator\n  : Math.random().toString(36);\n\n/**\n * @class Promise\n * @public\n * @param {Function} executor - Function that takes two arguments: resolve and reject functions.\n * Call the resolve function when you need to fulfill the promise and call the reject one\n * when you need to reject it.\n * @returns {Promise} Instance of Promise.\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * @description Class with almost identical API to\n * [ES6 Promise]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}.\n * There is a couple differences: set Promise.onError to a function with which you want to\n * subscribe to a promise error and set Promise.onUnhandledRejection to a function with which\n * you want to subscribe to an unhandled error\n * (defaults to console.error.bind(console, '%s %o', 'Uncaught (in promise)')).\n */\nclass Promise {\n  constructor(executor) {\n    if (!isFunction(executor)) {\n      throw new TypeError(`Promise resolver ${ {}.toString.call(executor) } is not a function`);\n    }\n\n    let hiddenStatus;\n    let hiddenValue;\n\n    const\tonFulfill = [];\n    const onReject = [];\n    const realPromise = this;\n    const hiddenPromise = {\n      handled: false,\n      get status() {\n        return hiddenStatus;\n      },\n      set status(value) {\n        hiddenStatus = value;\n        realPromise.status = value;\n      },\n      get value() {\n        return hiddenValue;\n      },\n      set value(val) {\n        hiddenValue = val;\n        realPromise.value = val;\n      }\n    };\n\n    hiddenPromise.status = 'pending';\n    hiddenPromise.value = undefined;\n\n    Object.defineProperties(this.$$ = {}, {\n      handled: {\n        get() {\n          return hiddenPromise.handled;\n        },\n        set(key) {\n          if (key === secret) {\n            hiddenPromise.handled = true;\n          }\n        }\n      },\n      handle: {\n        value(status, f, resolve, reject, key) {\n          if (key === secret) {\n            let proxy = null;\n\n            if (isFunction(f)) {\n              proxy = (value) => {\n                try {\n                  resolve(f(value));\n                } catch (err) {\n                  reject(err);\n                }\n              };\n            }\n\n            if (status === 'resolve') {\n              onFulfill.push(proxy || ((value) => resolve(value)));\n            } else if (status === 'reject') {\n              onReject.push(proxy || ((err) => reject(err)));\n            }\n          }\n        }\n      },\n      status: {\n        get() {\n          return hiddenPromise.status;\n        }\n      },\n      value: {\n        get() {\n          return hiddenPromise.value;\n        }\n      }\n    });\n\n    try {\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    function reject(err) {\n      if (hiddenPromise.status === 'pending') {\n        hiddenPromise.status = 'rejected';\n        hiddenPromise.value = err;\n\n        for (let i = 0, length = onReject.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onReject[i](err);\n        }\n\n        const {\n          onUnhandledRejection,\n          onError\n        } = Promise;\n\n        if (isFunction(onError)) {\n          onError(err);\n        }\n\n        setTimeout(() => {\n          if (!hiddenPromise.handled && isFunction(onUnhandledRejection)) {\n            onUnhandledRejection(err);\n          }\n        }, 1);\n      }\n    }\n\n    function resolve(value) {\n      if (hiddenPromise.status === 'pending') {\n        if (value && isFunction(value.then)) {\n          return value.then((value) => {\n            resolve(value);\n          }, (err) => {\n            reject(err);\n          });\n        }\n\n        hiddenPromise.status = 'fulfilled';\n        hiddenPromise.value = value;\n\n        for (let i = 0, length = onFulfill.length; i < length; i++) {\n          hiddenPromise.handled = true;\n\n          onFulfill[i](value);\n        }\n      }\n    }\n  }\n\n  /**\n   * @method Promise.all\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n   */\n  static all(iterable) {\n    const array = [];\n\n    let toResolve = 0;\n\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n        let i = 0;\n\n        while (!(next = iterable.next()).done) {\n          const promise = Promise.resolve(next.value);\n\n          toResolve++;\n\n          ((i) => {\n            promise.then((value) => {\n              toResolve--;\n              array[i] = value;\n\n              setTimeout(() => {\n                if (next.done && !toResolve) {\n                  resolve(array);\n                }\n              }, 1);\n            }, reject);\n          })(i++);\n        }\n\n        if (!i) {\n          return Promise.resolve([]);\n        }\n      });\n    }\n\n    const length = iterable.length;\n\n    if (!length) {\n      return Promise.resolve([]);\n    }\n\n    toResolve = length;\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0; i < length; i++) {\n        const promise = Promise.resolve(iterable[i]);\n\n        promise.then((value) => {\n          toResolve--;\n          array[i] = value;\n\n          if (!toResolve) {\n            resolve(array);\n          }\n        }, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.race\n   * @param {(Array|Iterable).<Promise|*>} iterable - Iterable object (like array) of promises\n   * or any values.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n   */\n  static race(iterable) {\n    if (iterable[iterator]) {\n      iterable = iterable[iterator]();\n\n      return new Promise((resolve, reject) => {\n        let next;\n\n        while (!(next = iterable.next()).done) {\n          next.value.then(resolve, reject);\n        }\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      for (let i = 0, length = iterable.length; i < length; i++) {\n        iterable[i].then(resolve, reject);\n      }\n    });\n  }\n\n  /**\n   * @method Promise.reject\n   * @param {*} value - Value to reject.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n   */\n  static reject(value) {\n    return new Promise((resolve, reject) => {\n      reject(value);\n    });\n  }\n\n  /**\n   * @method Promise.resolve\n   * @param {Promise|Thenable|*} value - Promise, thenable or any value to resolve.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n   */\n  static resolve(value) {\n    if (value && isFunction(value.then)) {\n      return value;\n    }\n\n    return new Promise((resolve) => {\n      resolve(value);\n    });\n  }\n\n  abort() {}\n\n  /**\n   * @method Promise#catch\n   * @param {onRejected} onRejected - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n   */\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * @method Promise#finally\n   * @public\n   * @param {onFulfilledOrRejected} onFulfilledOrRejected - onFulfilledOrRejected callback.\n   * @returns {Promise}\n   * @description Method for catching both fulfilled and rejected promises.\n   *\n   * @example\n   * spinner.show();\n   * fetchData()\n   *   .then((data) => {\n   *     // do something with data\n   *   })\n   *   .catch((err) => {\n   *     // handle error somehow\n   *   })\n   *   .finally(() => {\n   *     spinner.hide();\n   *   });\n   */\n  finally(onFulfilledOrRejected) {\n    const isFunc = isFunction(onFulfilledOrRejected);\n\n    return this.then((value) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(value, true)\n            : 0\n        )\n        .then(() => value)\n    ), (err) => (\n      Promise\n        .resolve(\n          isFunc\n            ? onFulfilledOrRejected(err, false)\n            : 0\n        )\n        .then(() => Promise.reject(err))\n    ));\n  }\n\n  /**\n   * @method Promise#then\n   * @param {onFulfilled} [onFulfilled] - onFulfilled callback.\n   * @param {onRejected} [onRejected] - onRejected callback.\n   * @returns {Promise} New instance of Promise.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n   */\n  then(onFulfilled, onRejected) {\n    const promise = this.$$;\n\n    if (promise.status === 'pending') {\n      return new Promise((resolve, reject) => {\n        promise.handle('reject', onRejected, resolve, reject, secret);\n        promise.handle('resolve', onFulfilled, resolve, reject, secret);\n      });\n    }\n\n    promise.handled = secret;\n\n    const { value } = promise;\n\n    let method;\n    let handler;\n\n    if (promise.status === 'fulfilled') {\n      method = 'resolve';\n      handler = onFulfilled;\n    } else {\n      method = 'reject';\n      handler = onRejected;\n    }\n\n    if (!isFunction(handler)) {\n      return Promise[method](value);\n    }\n\n    try {\n      return Promise.resolve(handler(value));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n}\n\nPromise.onError = null;\nPromise.onUnhandledRejection = console.error.bind(console, '%s %o', 'Uncaught (in promise)');\n\nexport default Promise;\n","import {\n  iterate,\n  trim\n} from './utils';\n\nexport default (rawHeaders) => {\n  const headers = {};\n\n  iterate((rawHeaders || '').split('\\n'), (value) => {\n    const index = value.indexOf(':');\n    const key = trim(value.substring(0, index));\n    const val = trim(value.substring(index + 1));\n\n    if (key) {\n      headers[key] = (headers[key] ? `${ headers[key] }, ` : '') + val;\n    }\n  });\n\n  return headers;\n};\n","import {\n  isObject,\n  toStringTag\n} from './utils';\n\nconst notToTransform = ['FormData', 'File', 'Blob', 'ArrayBuffer', 'String', 'Number'];\nconst withoutBody = ['DELETE', 'GET', 'HEAD'];\n\nexport default (data, method, headers) => {\n  if (withoutBody.indexOf(method) !== -1) {\n    return null;\n  }\n\n  if (isObject(data) && notToTransform.indexOf(toStringTag(data)) === -1) {\n    if (!headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json;charset=utf-8';\n    }\n\n    return JSON.stringify(data);\n  }\n\n  return data;\n};\n","import Ajaxer from './lib/Ajaxer';\n\nwindow.Ajaxer = Ajaxer;\n"],"names":["toStringTag","value","toString","call","slice","isFunction","isObject","isPrimitive","test","isString","assign","target","objects","source","key","iterate","object","callback","array","isArray","iterated","length","hasOwnProperty","map","newObject","trim","string","replace","whiteSpace","replaceString","stringToReplace","replacement","split","join","deepClone","clone","deepAssign","hasOwn","property","isAbsolute","url","absoluteURLRegexp","encode","encodeURIComponent","querySwitcher","query","prefix","queryParams","push","param","String","emptyArray","fetchBeforeMiddleware","config","baseURL","data","headers","method","params","METHOD","toUpperCase","constructURL","transformData","window","global","self","Array","secret","iterator","Symbol","Math","random","Promise","executor","reject","err","hiddenPromise","status","i","onReject","handled","onUnhandledRejection","onError","resolve","then","onFulfill","TypeError","hiddenStatus","hiddenValue","realPromise","this","val","undefined","defineProperties","$$","f","proxy","onRejected","onFulfilledOrRejected","isFunc","onFulfilled","promise","handle","handler","iterable","toResolve","next","done","console","error","bind","URL","indexOf","postfix","rawHeaders","index","substring","notToTransform","withoutBody","JSON","stringify","defaults","location","origin","uploadMethods","Ajaxer","ajaxer","request","apply","arguments","conf","before","defineProperty","setPrototypeOf","prototype","middleware","afterAll","after","unshift","beforeAll","header","dataConfig","urlConfig","xhr","auth","username","password","onprogress","responseType","timeout","withCredentials","XMLHttpRequest","open","setRequestHeader","upload","onabort","Error","type","onerror","ontimeout","onreadystatechange","readyState","response","responseText","parseHeaders","getAllResponseHeaders","statusText","catch","e","send","abort","Function"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}